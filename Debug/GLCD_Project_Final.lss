
GLCD_Project_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00800060  000037fe  00003892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800386  00800386  00003bb8  2**0
                  ALLOC
  3 .stab         00002a90  00000000  00000000  00003bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001345  00000000  00000000  00006648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000798d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00007b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000a630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000d038  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000d238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000d547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__vector_4>
      14:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__vector_5>
      18:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_6>
      1c:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__vector_7>
      20:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__vector_8>
      24:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__vector_9>
      28:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_10>
      2c:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 17 	call	0x2f08	; 0x2f08 <main>
      8a:	0c 94 fd 1b 	jmp	0x37fa	; 0x37fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e9       	ldi	r26, 0x9E	; 158
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e9       	ldi	r24, 0x9E	; 158
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e9       	ldi	r22, 0x9E	; 158
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ea 55       	subi	r30, 0x5A	; 90
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_VidSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"

/*Set Pin Direction*/
void DIO_VidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_VidSetPinDirection+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_VidSetPinDirection+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3d 83       	std	Y+5, r19	; 0x05
     f66:	2c 83       	std	Y+4, r18	; 0x04
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_VidSetPinDirection+0x2a>
     f72:	47 c0       	rjmp	.+142    	; 0x1002 <DIO_VidSetPinDirection+0xb8>
     f74:	2c 81       	ldd	r18, Y+4	; 0x04
     f76:	3d 81       	ldd	r19, Y+5	; 0x05
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_VidSetPinDirection+0x3e>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	71 f0       	breq	.+28     	; 0xfa2 <DIO_VidSetPinDirection+0x58>
     f86:	cb c0       	rjmp	.+406    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
     f88:	2c 81       	ldd	r18, Y+4	; 0x04
     f8a:	3d 81       	ldd	r19, Y+5	; 0x05
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_VidSetPinDirection+0x4a>
     f92:	67 c0       	rjmp	.+206    	; 0x1062 <DIO_VidSetPinDirection+0x118>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_VidSetPinDirection+0x56>
     f9e:	91 c0       	rjmp	.+290    	; 0x10c2 <DIO_VidSetPinDirection+0x178>
     fa0:	be c0       	rjmp	.+380    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinDirection == PIN_OUTPUT)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	a1 f4       	brne	.+40     	; 0xfd0 <DIO_VidSetPinDirection+0x86>
		{
			SET_BIT(DDRA,Copy_u8PinNumber);
     fa8:	aa e3       	ldi	r26, 0x3A	; 58
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e3       	ldi	r30, 0x3A	; 58
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinDirection+0x7c>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinDirection+0x78>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	a7 c0       	rjmp	.+334    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	88 23       	and	r24, r24
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <DIO_VidSetPinDirection+0x8e>
     fd6:	a3 c0       	rjmp	.+326    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRA,Copy_u8PinNumber);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_VidSetPinDirection+0xac>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_VidSetPinDirection+0xa8>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	8e c0       	rjmp	.+284    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <DIO_VidSetPinDirection+0xe6>
		{
			SET_BIT(DDRB,Copy_u8PinNumber);
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidSetPinDirection+0xdc>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidSetPinDirection+0xd8>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	77 c0       	rjmp	.+238    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 23       	and	r24, r24
    1034:	09 f0       	breq	.+2      	; 0x1038 <DIO_VidSetPinDirection+0xee>
    1036:	73 c0       	rjmp	.+230    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRB,Copy_u8PinNumber);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_VidSetPinDirection+0x10c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_VidSetPinDirection+0x108>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	5e c0       	rjmp	.+188    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <DIO_VidSetPinDirection+0x146>
		{
			SET_BIT(DDRC,Copy_u8PinNumber);
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_VidSetPinDirection+0x13c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_VidSetPinDirection+0x138>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	47 c0       	rjmp	.+142    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	88 23       	and	r24, r24
    1094:	09 f0       	breq	.+2      	; 0x1098 <DIO_VidSetPinDirection+0x14e>
    1096:	43 c0       	rjmp	.+134    	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRC,Copy_u8PinNumber);
    1098:	a4 e3       	ldi	r26, 0x34	; 52
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e4 e3       	ldi	r30, 0x34	; 52
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_VidSetPinDirection+0x16c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_VidSetPinDirection+0x168>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	2e c0       	rjmp	.+92     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinDirection == PIN_OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <DIO_VidSetPinDirection+0x1a6>
		{
			SET_BIT(DDRD,Copy_u8PinNumber);
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_VidSetPinDirection+0x19c>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_VidSetPinDirection+0x198>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	17 c0       	rjmp	.+46     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		}
		else if(Copy_u8PinDirection == PIN_INPUT)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	88 23       	and	r24, r24
    10f4:	a1 f4       	brne	.+40     	; 0x111e <DIO_VidSetPinDirection+0x1d4>
		{
			CLR_BIT(DDRD,Copy_u8PinNumber);
    10f6:	a1 e3       	ldi	r26, 0x31	; 49
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e3       	ldi	r30, 0x31	; 49
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_VidSetPinDirection+0x1ca>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_VidSetPinDirection+0x1c6>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
		}
		break;
	}

}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_VidSetPinValue>:
/*Set Pin Value*/
void DIO_VidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_VidSetPinValue+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_VidSetPinValue+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
    1140:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3d 83       	std	Y+5, r19	; 0x05
    114a:	2c 83       	std	Y+4, r18	; 0x04
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <DIO_VidSetPinValue+0x2a>
    1156:	47 c0       	rjmp	.+142    	; 0x11e6 <DIO_VidSetPinValue+0xb8>
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	3d 81       	ldd	r19, Y+5	; 0x05
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <DIO_VidSetPinValue+0x3e>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	71 f0       	breq	.+28     	; 0x1186 <DIO_VidSetPinValue+0x58>
    116a:	cb c0       	rjmp	.+406    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
    116c:	2c 81       	ldd	r18, Y+4	; 0x04
    116e:	3d 81       	ldd	r19, Y+5	; 0x05
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_VidSetPinValue+0x4a>
    1176:	67 c0       	rjmp	.+206    	; 0x1246 <DIO_VidSetPinValue+0x118>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_VidSetPinValue+0x56>
    1182:	91 c0       	rjmp	.+290    	; 0x12a6 <DIO_VidSetPinValue+0x178>
    1184:	be c0       	rjmp	.+380    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
	{
	case DIO_PORTA:
		if(Copy_u8PinValue == PIN_HIGH)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	a1 f4       	brne	.+40     	; 0x11b4 <DIO_VidSetPinValue+0x86>
		{
			SET_BIT(PORTA,Copy_u8PinNumber);
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_VidSetPinValue+0x7c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_VidSetPinValue+0x78>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	a7 c0       	rjmp	.+334    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 23       	and	r24, r24
    11b8:	09 f0       	breq	.+2      	; 0x11bc <DIO_VidSetPinValue+0x8e>
    11ba:	a3 c0       	rjmp	.+326    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTA,Copy_u8PinNumber);
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_VidSetPinValue+0xac>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_VidSetPinValue+0xa8>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	8e c0       	rjmp	.+284    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8PinValue == PIN_HIGH)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <DIO_VidSetPinValue+0xe6>
		{
			SET_BIT(PORTB,Copy_u8PinNumber);
    11ec:	a8 e3       	ldi	r26, 0x38	; 56
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_VidSetPinValue+0xdc>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_VidSetPinValue+0xd8>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	77 c0       	rjmp	.+238    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 23       	and	r24, r24
    1218:	09 f0       	breq	.+2      	; 0x121c <DIO_VidSetPinValue+0xee>
    121a:	73 c0       	rjmp	.+230    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTB,Copy_u8PinNumber);
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_VidSetPinValue+0x10c>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_VidSetPinValue+0x108>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	5e c0       	rjmp	.+188    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8PinValue == PIN_HIGH)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <DIO_VidSetPinValue+0x146>
		{
			SET_BIT(PORTC,Copy_u8PinNumber);
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_VidSetPinValue+0x13c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_VidSetPinValue+0x138>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	47 c0       	rjmp	.+142    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_VidSetPinValue+0x14e>
    127a:	43 c0       	rjmp	.+134    	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTC,Copy_u8PinNumber);
    127c:	a5 e3       	ldi	r26, 0x35	; 53
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e3       	ldi	r30, 0x35	; 53
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_VidSetPinValue+0x16c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_VidSetPinValue+0x168>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	2e c0       	rjmp	.+92     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8PinValue == PIN_HIGH)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a1 f4       	brne	.+40     	; 0x12d4 <DIO_VidSetPinValue+0x1a6>
		{
			SET_BIT(PORTD,Copy_u8PinNumber);
    12ac:	a2 e3       	ldi	r26, 0x32	; 50
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e2 e3       	ldi	r30, 0x32	; 50
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_VidSetPinValue+0x19c>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_VidSetPinValue+0x198>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	17 c0       	rjmp	.+46     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		}
		else if(Copy_u8PinValue == PIN_LOW)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 23       	and	r24, r24
    12d8:	a1 f4       	brne	.+40     	; 0x1302 <DIO_VidSetPinValue+0x1d4>
		{
			CLR_BIT(PORTD,Copy_u8PinNumber);
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_VidSetPinValue+0x1ca>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_VidSetPinValue+0x1c6>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
		}
		break;
	}
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <DIO_u8GetPinValue>:
/*Get Pin Value*/
u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_u8GetPinValue+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_u8GetPinValue+0x8>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8PinState = 0;
    1324:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	41 30       	cpi	r20, 0x01	; 1
    1336:	51 05       	cpc	r21, r1
    1338:	41 f1       	breq	.+80     	; 0x138a <DIO_u8GetPinValue+0x78>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	91 05       	cpc	r25, r1
    1342:	34 f4       	brge	.+12     	; 0x1350 <DIO_u8GetPinValue+0x3e>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	61 f0       	breq	.+24     	; 0x1366 <DIO_u8GetPinValue+0x54>
    134e:	52 c0       	rjmp	.+164    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
    1350:	4c 81       	ldd	r20, Y+4	; 0x04
    1352:	5d 81       	ldd	r21, Y+5	; 0x05
    1354:	42 30       	cpi	r20, 0x02	; 2
    1356:	51 05       	cpc	r21, r1
    1358:	51 f1       	breq	.+84     	; 0x13ae <DIO_u8GetPinValue+0x9c>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	b9 f1       	breq	.+110    	; 0x13d2 <DIO_u8GetPinValue+0xc0>
    1364:	47 c0       	rjmp	.+142    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_PORTA:
		LOC_u8PinState = GET_BIT(PINA, Copy_u8PinNumber);
    1366:	e9 e3       	ldi	r30, 0x39	; 57
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetPinValue+0x6c>
    137a:	55 95       	asr	r21
    137c:	47 95       	ror	r20
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8GetPinValue+0x68>
    1382:	ca 01       	movw	r24, r20
    1384:	81 70       	andi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	35 c0       	rjmp	.+106    	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTB:
		LOC_u8PinState = GET_BIT(PINB, Copy_u8PinNumber);
    138a:	e6 e3       	ldi	r30, 0x36	; 54
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x90>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x8c>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	23 c0       	rjmp	.+70     	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTC:
		LOC_u8PinState = GET_BIT(PINC, Copy_u8PinNumber);
    13ae:	e3 e3       	ldi	r30, 0x33	; 51
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinValue+0xb4>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinValue+0xb0>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	11 c0       	rjmp	.+34     	; 0x13f4 <DIO_u8GetPinValue+0xe2>
		break;
	case DIO_PORTD:
		LOC_u8PinState = GET_BIT(PIND, Copy_u8PinNumber);
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinValue+0xd8>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinValue+0xd4>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8PinState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <DIO_VidSetPortDirection>:
/*Set Port Direction*/
void DIO_VidSetPortDirection(u8 Copy_u8PortName,u8 Copy_u8PortDirection)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_VidSetPortDirection+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_VidSetPortDirection+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3c 83       	std	Y+4, r19	; 0x04
    141e:	2b 83       	std	Y+3, r18	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	d1 f0       	breq	.+52     	; 0x145e <DIO_VidSetPortDirection+0x58>
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <DIO_VidSetPortDirection+0x38>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	61 f0       	breq	.+24     	; 0x1454 <DIO_VidSetPortDirection+0x4e>
    143c:	1e c0       	rjmp	.+60     	; 0x147a <DIO_VidSetPortDirection+0x74>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <DIO_VidSetPortDirection+0x62>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <DIO_VidSetPortDirection+0x6c>
    1452:	13 c0       	rjmp	.+38     	; 0x147a <DIO_VidSetPortDirection+0x74>
	{
	case DIO_PORTA:
		DDRA = Copy_u8PortDirection;
    1454:	ea e3       	ldi	r30, 0x3A	; 58
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
    145c:	0e c0       	rjmp	.+28     	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB = Copy_u8PortDirection;
    145e:	e7 e3       	ldi	r30, 0x37	; 55
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	09 c0       	rjmp	.+18     	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC = Copy_u8PortDirection;
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	04 c0       	rjmp	.+8      	; 0x147a <DIO_VidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD = Copy_u8PortDirection;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
		break;
	}
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <DIO_VidSetPortValue>:
/*Set Port Value*/
void DIO_VidSetPortValue(u8 Copy_u8PortName,u8 Copy_u8PortValue)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_VidSetPortValue+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_VidSetPortValue+0x8>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	d1 f0       	breq	.+52     	; 0x14e0 <DIO_VidSetPortValue+0x58>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <DIO_VidSetPortValue+0x38>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <DIO_VidSetPortValue+0x4e>
    14be:	1e c0       	rjmp	.+60     	; 0x14fc <DIO_VidSetPortValue+0x74>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	81 f0       	breq	.+32     	; 0x14ea <DIO_VidSetPortValue+0x62>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <DIO_VidSetPortValue+0x6c>
    14d4:	13 c0       	rjmp	.+38     	; 0x14fc <DIO_VidSetPortValue+0x74>
	{
	case DIO_PORTA:
		PORTA = Copy_u8PortValue;
    14d6:	eb e3       	ldi	r30, 0x3B	; 59
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8PortValue;
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	80 83       	st	Z, r24
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8PortValue;
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	80 83       	st	Z, r24
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <DIO_VidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8PortValue;
    14f4:	e2 e3       	ldi	r30, 0x32	; 50
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
		break;
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DIO_VidSet4MSBDirection>:
/*Set 4MSB Direction*/
void DIO_VidSet4MSBDirection(u8 Copy_u8PortName,u8 Copy_u8PinsDirection)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DIO_VidSet4MSBDirection+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <DIO_VidSet4MSBDirection+0x8>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	3c 83       	std	Y+4, r19	; 0x04
    1522:	2b 83       	std	Y+3, r18	; 0x03
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	91 05       	cpc	r25, r1
    152c:	79 f1       	breq	.+94     	; 0x158c <DIO_VidSet4MSBDirection+0x82>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <DIO_VidSet4MSBDirection+0x38>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f0       	breq	.+26     	; 0x155a <DIO_VidSet4MSBDirection+0x50>
    1540:	6f c0       	rjmp	.+222    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	3c 81       	ldd	r19, Y+4	; 0x04
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	c9 f1       	breq	.+114    	; 0x15be <DIO_VidSet4MSBDirection+0xb4>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <DIO_VidSet4MSBDirection+0x4e>
    1556:	4c c0       	rjmp	.+152    	; 0x15f0 <DIO_VidSet4MSBDirection+0xe6>
    1558:	63 c0       	rjmp	.+198    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
	{
	case DIO_PORTA:
		DDRA&=0x0F;
    155a:	aa e3       	ldi	r26, 0x3A	; 58
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 70       	andi	r24, 0x0F	; 15
    1566:	8c 93       	st	X, r24
		DDRA|=(Copy_u8PinsDirection<<4);
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	82 95       	swap	r24
    157c:	92 95       	swap	r25
    157e:	90 7f       	andi	r25, 0xF0	; 240
    1580:	98 27       	eor	r25, r24
    1582:	80 7f       	andi	r24, 0xF0	; 240
    1584:	98 27       	eor	r25, r24
    1586:	82 2b       	or	r24, r18
    1588:	8c 93       	st	X, r24
    158a:	4a c0       	rjmp	.+148    	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTB:
		DDRB&=0x0F;
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 70       	andi	r24, 0x0F	; 15
    1598:	8c 93       	st	X, r24
		DDRB|=(Copy_u8PinsDirection<<4);
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	82 95       	swap	r24
    15ae:	92 95       	swap	r25
    15b0:	90 7f       	andi	r25, 0xF0	; 240
    15b2:	98 27       	eor	r25, r24
    15b4:	80 7f       	andi	r24, 0xF0	; 240
    15b6:	98 27       	eor	r25, r24
    15b8:	82 2b       	or	r24, r18
    15ba:	8c 93       	st	X, r24
    15bc:	31 c0       	rjmp	.+98     	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTC:
		DDRC&=0x0F;
    15be:	a4 e3       	ldi	r26, 0x34	; 52
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e4 e3       	ldi	r30, 0x34	; 52
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 70       	andi	r24, 0x0F	; 15
    15ca:	8c 93       	st	X, r24
		DDRC|=(Copy_u8PinsDirection<<4);
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	82 95       	swap	r24
    15e0:	92 95       	swap	r25
    15e2:	90 7f       	andi	r25, 0xF0	; 240
    15e4:	98 27       	eor	r25, r24
    15e6:	80 7f       	andi	r24, 0xF0	; 240
    15e8:	98 27       	eor	r25, r24
    15ea:	82 2b       	or	r24, r18
    15ec:	8c 93       	st	X, r24
    15ee:	18 c0       	rjmp	.+48     	; 0x1620 <DIO_VidSet4MSBDirection+0x116>
		break;
	case DIO_PORTD:
		DDRD&=0x0F;
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	8c 93       	st	X, r24
		DDRD|=(Copy_u8PinsDirection<<4);
    15fe:	a1 e3       	ldi	r26, 0x31	; 49
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e1 e3       	ldi	r30, 0x31	; 49
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	82 95       	swap	r24
    1612:	92 95       	swap	r25
    1614:	90 7f       	andi	r25, 0xF0	; 240
    1616:	98 27       	eor	r25, r24
    1618:	80 7f       	andi	r24, 0xF0	; 240
    161a:	98 27       	eor	r25, r24
    161c:	82 2b       	or	r24, r18
    161e:	8c 93       	st	X, r24
		break;
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_VidSet4LSBDirection>:
/*Set 4LSB Direction*/
void DIO_VidSet4LSBDirection(u8 Copy_u8PortName,u8 Copy_u8PinsDirection)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <DIO_VidSet4LSBDirection+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_VidSet4LSBDirection+0x8>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	29 f1       	breq	.+74     	; 0x169c <DIO_VidSet4LSBDirection+0x6e>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <DIO_VidSet4LSBDirection+0x38>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <DIO_VidSet4LSBDirection+0x4e>
    1664:	4a c0       	rjmp	.+148    	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	31 f1       	breq	.+76     	; 0x16bc <DIO_VidSet4LSBDirection+0x8e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	89 f1       	breq	.+98     	; 0x16dc <DIO_VidSet4LSBDirection+0xae>
    167a:	3f c0       	rjmp	.+126    	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
	{
	case DIO_PORTA:
		DDRA&=0xF0;
    167c:	aa e3       	ldi	r26, 0x3A	; 58
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 7f       	andi	r24, 0xF0	; 240
    1688:	8c 93       	st	X, r24
		DDRA|=Copy_u8PinsDirection;
    168a:	aa e3       	ldi	r26, 0x3A	; 58
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ea e3       	ldi	r30, 0x3A	; 58
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	90 81       	ld	r25, Z
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
    169a:	2f c0       	rjmp	.+94     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTB:
		DDRB&=0xF0;
    169c:	a7 e3       	ldi	r26, 0x37	; 55
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e7 e3       	ldi	r30, 0x37	; 55
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 7f       	andi	r24, 0xF0	; 240
    16a8:	8c 93       	st	X, r24
		DDRB|=Copy_u8PinsDirection;
    16aa:	a7 e3       	ldi	r26, 0x37	; 55
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	90 81       	ld	r25, Z
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	89 2b       	or	r24, r25
    16b8:	8c 93       	st	X, r24
    16ba:	1f c0       	rjmp	.+62     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTC:
		DDRC&=0xF0;
    16bc:	a4 e3       	ldi	r26, 0x34	; 52
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e4 e3       	ldi	r30, 0x34	; 52
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 7f       	andi	r24, 0xF0	; 240
    16c8:	8c 93       	st	X, r24
		DDRC|=Copy_u8PinsDirection;
    16ca:	a4 e3       	ldi	r26, 0x34	; 52
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e4 e3       	ldi	r30, 0x34	; 52
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	90 81       	ld	r25, Z
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	89 2b       	or	r24, r25
    16d8:	8c 93       	st	X, r24
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <DIO_VidSet4LSBDirection+0xcc>
		break;
	case DIO_PORTD:
		DDRD&=0xF0;
    16dc:	a1 e3       	ldi	r26, 0x31	; 49
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e1 e3       	ldi	r30, 0x31	; 49
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 7f       	andi	r24, 0xF0	; 240
    16e8:	8c 93       	st	X, r24
		DDRD|=Copy_u8PinsDirection;
    16ea:	a1 e3       	ldi	r26, 0x31	; 49
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	90 81       	ld	r25, Z
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	89 2b       	or	r24, r25
    16f8:	8c 93       	st	X, r24
		break;
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <DIO_VidSet4MSBValue>:
/*Set 4MSB Value*/
void DIO_VidSet4MSBValue(u8 Copy_u8PortName,u8 Copy_u8PinsValue)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_VidSet4MSBValue+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DIO_VidSet4MSBValue+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3c 83       	std	Y+4, r19	; 0x04
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	79 f1       	breq	.+94     	; 0x178a <DIO_VidSet4MSBValue+0x82>
    172c:	2b 81       	ldd	r18, Y+3	; 0x03
    172e:	3c 81       	ldd	r19, Y+4	; 0x04
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	2c f4       	brge	.+10     	; 0x1740 <DIO_VidSet4MSBValue+0x38>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f0       	breq	.+26     	; 0x1758 <DIO_VidSet4MSBValue+0x50>
    173e:	6f c0       	rjmp	.+222    	; 0x181e <DIO_VidSet4MSBValue+0x116>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	c9 f1       	breq	.+114    	; 0x17bc <DIO_VidSet4MSBValue+0xb4>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_VidSet4MSBValue+0x4e>
    1754:	4c c0       	rjmp	.+152    	; 0x17ee <DIO_VidSet4MSBValue+0xe6>
    1756:	63 c0       	rjmp	.+198    	; 0x181e <DIO_VidSet4MSBValue+0x116>
	{
	case DIO_PORTA:
		PORTA&=0x0F;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8f 70       	andi	r24, 0x0F	; 15
    1764:	8c 93       	st	X, r24
		PORTA|=(Copy_u8PinsValue<<4);
    1766:	ab e3       	ldi	r26, 0x3B	; 59
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	eb e3       	ldi	r30, 0x3B	; 59
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	82 95       	swap	r24
    177a:	92 95       	swap	r25
    177c:	90 7f       	andi	r25, 0xF0	; 240
    177e:	98 27       	eor	r25, r24
    1780:	80 7f       	andi	r24, 0xF0	; 240
    1782:	98 27       	eor	r25, r24
    1784:	82 2b       	or	r24, r18
    1786:	8c 93       	st	X, r24
    1788:	4a c0       	rjmp	.+148    	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTB:
		PORTB&=0x0F;
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	8c 93       	st	X, r24
		PORTB|=(Copy_u8PinsValue<<4);
    1798:	a8 e3       	ldi	r26, 0x38	; 56
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	28 2f       	mov	r18, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	82 95       	swap	r24
    17ac:	92 95       	swap	r25
    17ae:	90 7f       	andi	r25, 0xF0	; 240
    17b0:	98 27       	eor	r25, r24
    17b2:	80 7f       	andi	r24, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
    17b6:	82 2b       	or	r24, r18
    17b8:	8c 93       	st	X, r24
    17ba:	31 c0       	rjmp	.+98     	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTC:
		PORTC&=0x0F;
    17bc:	a5 e3       	ldi	r26, 0x35	; 53
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 70       	andi	r24, 0x0F	; 15
    17c8:	8c 93       	st	X, r24
		PORTC|=(Copy_u8PinsValue<<4);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	28 2f       	mov	r18, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	82 95       	swap	r24
    17de:	92 95       	swap	r25
    17e0:	90 7f       	andi	r25, 0xF0	; 240
    17e2:	98 27       	eor	r25, r24
    17e4:	80 7f       	andi	r24, 0xF0	; 240
    17e6:	98 27       	eor	r25, r24
    17e8:	82 2b       	or	r24, r18
    17ea:	8c 93       	st	X, r24
    17ec:	18 c0       	rjmp	.+48     	; 0x181e <DIO_VidSet4MSBValue+0x116>
		break;
	case DIO_PORTD:
		PORTD&=0x0F;
    17ee:	a2 e3       	ldi	r26, 0x32	; 50
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e3       	ldi	r30, 0x32	; 50
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 70       	andi	r24, 0x0F	; 15
    17fa:	8c 93       	st	X, r24
		PORTD|=(Copy_u8PinsValue<<4);
    17fc:	a2 e3       	ldi	r26, 0x32	; 50
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	82 95       	swap	r24
    1810:	92 95       	swap	r25
    1812:	90 7f       	andi	r25, 0xF0	; 240
    1814:	98 27       	eor	r25, r24
    1816:	80 7f       	andi	r24, 0xF0	; 240
    1818:	98 27       	eor	r25, r24
    181a:	82 2b       	or	r24, r18
    181c:	8c 93       	st	X, r24
		break;
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_VidSetLSBValue>:
/*Set 4LSB Value*/
void DIO_VidSetLSBValue(u8 Copy_u8PortName,u8 Copy_u8PinsValue)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_VidSetLSBValue+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_VidSetLSBValue+0x8>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	29 f1       	breq	.+74     	; 0x189a <DIO_VidSetLSBValue+0x6e>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_VidSetLSBValue+0x38>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_VidSetLSBValue+0x4e>
    1862:	4a c0       	rjmp	.+148    	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	31 f1       	breq	.+76     	; 0x18ba <DIO_VidSetLSBValue+0x8e>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	89 f1       	breq	.+98     	; 0x18da <DIO_VidSetLSBValue+0xae>
    1878:	3f c0       	rjmp	.+126    	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
	{
	case DIO_PORTA:
		PORTA&=0xF0;
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 7f       	andi	r24, 0xF0	; 240
    1886:	8c 93       	st	X, r24
		PORTA|=Copy_u8PinsValue;
    1888:	ab e3       	ldi	r26, 0x3B	; 59
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	89 2b       	or	r24, r25
    1896:	8c 93       	st	X, r24
    1898:	2f c0       	rjmp	.+94     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTB:
		PORTB&=0xF0;
    189a:	a8 e3       	ldi	r26, 0x38	; 56
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 7f       	andi	r24, 0xF0	; 240
    18a6:	8c 93       	st	X, r24
		PORTB|=Copy_u8PinsValue;
    18a8:	a8 e3       	ldi	r26, 0x38	; 56
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	90 81       	ld	r25, Z
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	89 2b       	or	r24, r25
    18b6:	8c 93       	st	X, r24
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTC:
		PORTC&=0xF0;
    18ba:	a5 e3       	ldi	r26, 0x35	; 53
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e5 e3       	ldi	r30, 0x35	; 53
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 7f       	andi	r24, 0xF0	; 240
    18c6:	8c 93       	st	X, r24
		PORTC|=Copy_u8PinsValue;
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	90 81       	ld	r25, Z
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	89 2b       	or	r24, r25
    18d6:	8c 93       	st	X, r24
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <DIO_VidSetLSBValue+0xcc>
		break;
	case DIO_PORTD:
		PORTD&=0xF0;
    18da:	a2 e3       	ldi	r26, 0x32	; 50
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e3       	ldi	r30, 0x32	; 50
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 7f       	andi	r24, 0xF0	; 240
    18e6:	8c 93       	st	X, r24
		PORTD|=Copy_u8PinsValue;
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	90 81       	ld	r25, Z
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	89 2b       	or	r24, r25
    18f6:	8c 93       	st	X, r24
		break;
	}
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <GIE_VidEnable>:
#include "BIT_MATH.h"
#include "GIE_Private.h"

//Enable Global Interrupt
void GIE_VidEnable(void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    190e:	af e5       	ldi	r26, 0x5F	; 95
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ef e5       	ldi	r30, 0x5F	; 95
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	8c 93       	st	X, r24
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <GIE_VidDisable>:
//Disable Global Interrupt
void GIE_VidDisable(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    192a:	af e5       	ldi	r26, 0x5F	; 95
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e5       	ldi	r30, 0x5F	; 95
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 77       	andi	r24, 0x7F	; 127
    1936:	8c 93       	st	X, r24
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <GLCD_VidSendCommand>:
u8 Y = 0;   //Global Variable to Track Column Address
u8 X = 0;   //Global Variable to Track Page

//Send Command
void GLCD_VidSendCommand(u8 Copy_u8Command)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	69 97       	sbiw	r28, 0x19	; 25
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	89 8f       	std	Y+25, r24	; 0x19
	//Choose Write Mode (RW)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_RW_PIN,PIN_LOW);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Select Command Register (RS)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_RS_PIN,PIN_LOW);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Send Command
	DIO_VidSetPortValue(GLCD_DATA_PORT,Copy_u8Command);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	69 8d       	ldd	r22, Y+25	; 0x19
    196c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_VidSetPortValue>
	//Enable
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_E_PIN,PIN_HIGH);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 ea       	ldi	r26, 0xA0	; 160
    1980:	b0 e4       	ldi	r27, 0x40	; 64
    1982:	8d 8b       	std	Y+21, r24	; 0x15
    1984:	9e 8b       	std	Y+22, r25	; 0x16
    1986:	af 8b       	std	Y+23, r26	; 0x17
    1988:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    198a:	6d 89       	ldd	r22, Y+21	; 0x15
    198c:	7e 89       	ldd	r23, Y+22	; 0x16
    198e:	8f 89       	ldd	r24, Y+23	; 0x17
    1990:	98 8d       	ldd	r25, Y+24	; 0x18
    1992:	2b ea       	ldi	r18, 0xAB	; 171
    1994:	3a ea       	ldi	r19, 0xAA	; 170
    1996:	4a ea       	ldi	r20, 0xAA	; 170
    1998:	50 e4       	ldi	r21, 0x40	; 64
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	89 8b       	std	Y+17, r24	; 0x11
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	ab 8b       	std	Y+19, r26	; 0x13
    19a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19aa:	69 89       	ldd	r22, Y+17	; 0x11
    19ac:	7a 89       	ldd	r23, Y+18	; 0x12
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	1c f4       	brge	.+6      	; 0x19c8 <GLCD_VidSendCommand+0x8a>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	88 8b       	std	Y+16, r24	; 0x10
    19c6:	91 c0       	rjmp	.+290    	; 0x1aea <GLCD_VidSendCommand+0x1ac>
	else if (__tmp > 255)
    19c8:	69 89       	ldd	r22, Y+17	; 0x11
    19ca:	7a 89       	ldd	r23, Y+18	; 0x12
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <GLCD_VidSendCommand+0xa4>
    19e0:	7b c0       	rjmp	.+246    	; 0x1ad8 <GLCD_VidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8c 87       	std	Y+12, r24	; 0x0c
    19fc:	9d 87       	std	Y+13, r25	; 0x0d
    19fe:	ae 87       	std	Y+14, r26	; 0x0e
    1a00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a e7       	ldi	r20, 0x7A	; 122
    1a10:	55 e4       	ldi	r21, 0x45	; 69
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	88 87       	std	Y+8, r24	; 0x08
    1a1c:	99 87       	std	Y+9, r25	; 0x09
    1a1e:	aa 87       	std	Y+10, r26	; 0x0a
    1a20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a22:	68 85       	ldd	r22, Y+8	; 0x08
    1a24:	79 85       	ldd	r23, Y+9	; 0x09
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <GLCD_VidSendCommand+0x106>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9f 83       	std	Y+7, r25	; 0x07
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <GLCD_VidSendCommand+0x184>
	else if (__tmp > 65535)
    1a44:	68 85       	ldd	r22, Y+8	; 0x08
    1a46:	79 85       	ldd	r23, Y+9	; 0x09
    1a48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <GLCD_VidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <GLCD_VidSendCommand+0x166>
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9d 83       	std	Y+5, r25	; 0x05
    1a8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	9d 81       	ldd	r25, Y+5	; 0x05
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <GLCD_VidSendCommand+0x154>
    1a96:	9d 83       	std	Y+5, r25	; 0x05
    1a98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9f 83       	std	Y+7, r25	; 0x07
    1aa2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <GLCD_VidSendCommand+0x148>
    1aac:	24 c0       	rjmp	.+72     	; 0x1af6 <GLCD_VidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	68 85       	ldd	r22, Y+8	; 0x08
    1ab0:	79 85       	ldd	r23, Y+9	; 0x09
    1ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
    1ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <GLCD_VidSendCommand+0x190>
    1ad2:	9b 83       	std	Y+3, r25	; 0x03
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <GLCD_VidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad8:	69 89       	ldd	r22, Y+17	; 0x11
    1ada:	7a 89       	ldd	r23, Y+18	; 0x12
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	88 8b       	std	Y+16, r24	; 0x10
    1aea:	88 89       	ldd	r24, Y+16	; 0x10
    1aec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <GLCD_VidSendCommand+0x1b2>
    1af4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_E_PIN,PIN_LOW);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	62 e0       	ldi	r22, 0x02	; 2
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
}
    1b00:	69 96       	adiw	r28, 0x19	; 25
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <GLCD_VidInit>:
//GLCD Initialization
void GLCD_VidInit(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
	//Select CS1, CS2 & Set Reset Pin to High
	DIO_VidSetPinValue(GLCD_CONTROL_PORT, GLCD_C1_PIN,PIN_HIGH);
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	63 e0       	ldi	r22, 0x03	; 3
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT, GLCD_C2_PIN,PIN_HIGH);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT, GLCD_RST_PIN,PIN_HIGH);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	65 e0       	ldi	r22, 0x05	; 5
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 ea       	ldi	r26, 0xA0	; 160
    1b4a:	b1 e4       	ldi	r27, 0x41	; 65
    1b4c:	8b 87       	std	Y+11, r24	; 0x0b
    1b4e:	9c 87       	std	Y+12, r25	; 0x0c
    1b50:	ad 87       	std	Y+13, r26	; 0x0d
    1b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	55 e4       	ldi	r21, 0x45	; 69
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f 83       	std	Y+7, r24	; 0x07
    1b6e:	98 87       	std	Y+8, r25	; 0x08
    1b70:	a9 87       	std	Y+9, r26	; 0x09
    1b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <GLCD_VidInit+0x84>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <GLCD_VidInit+0x102>
	else if (__tmp > 65535)
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <GLCD_VidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <GLCD_VidInit+0xe4>
    1bd8:	80 e9       	ldi	r24, 0x90	; 144
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <GLCD_VidInit+0xd2>
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <GLCD_VidInit+0xc6>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <GLCD_VidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <GLCD_VidInit+0x10e>
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_VidSendCommand(GLCD_DISPLAY_OFF);   //Display Off
    1c28:	8e e3       	ldi	r24, 0x3E	; 62
    1c2a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_COLUMN);  //Set Column to address 0x40
    1c2e:	80 e4       	ldi	r24, 0x40	; 64
    1c30:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_PAGE);    //Set Page to 0xB8
    1c34:	88 eb       	ldi	r24, 0xB8	; 184
    1c36:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_START_LINE);    //Set Line to 0xC0
    1c3a:	80 ec       	ldi	r24, 0xC0	; 192
    1c3c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(GLCD_DISPLAY_ON);    //Display On
    1c40:	8f e3       	ldi	r24, 0x3F	; 63
    1c42:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
}
    1c46:	2e 96       	adiw	r28, 0x0e	; 14
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GLCD_VidSendData>:
//Send Data
void GLCD_VidSendData(u8 Copy_u8Data)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	69 97       	sbiw	r28, 0x19	; 25
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	89 8f       	std	Y+25, r24	; 0x19
	//Choose Write Mode (RW)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_RW_PIN ,PIN_LOW);
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Select Data Register (RS)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_RS_PIN ,PIN_HIGH);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	//Send Data
	DIO_VidSetPortValue(GLCD_DATA_PORT,Copy_u8Data);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	69 8d       	ldd	r22, Y+25	; 0x19
    1c86:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_VidSetPortValue>
	//Enable
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_E_PIN,PIN_HIGH);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9a:	b0 e4       	ldi	r27, 0x40	; 64
    1c9c:	8d 8b       	std	Y+21, r24	; 0x15
    1c9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ca0:	af 8b       	std	Y+23, r26	; 0x17
    1ca2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	2b ea       	ldi	r18, 0xAB	; 171
    1cae:	3a ea       	ldi	r19, 0xAA	; 170
    1cb0:	4a ea       	ldi	r20, 0xAA	; 170
    1cb2:	50 e4       	ldi	r21, 0x40	; 64
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	89 8b       	std	Y+17, r24	; 0x11
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	ab 8b       	std	Y+19, r26	; 0x13
    1cc2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cc4:	69 89       	ldd	r22, Y+17	; 0x11
    1cc6:	7a 89       	ldd	r23, Y+18	; 0x12
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	1c f4       	brge	.+6      	; 0x1ce2 <GLCD_VidSendData+0x8a>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	88 8b       	std	Y+16, r24	; 0x10
    1ce0:	91 c0       	rjmp	.+290    	; 0x1e04 <GLCD_VidSendData+0x1ac>
	else if (__tmp > 255)
    1ce2:	69 89       	ldd	r22, Y+17	; 0x11
    1ce4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <GLCD_VidSendData+0xa4>
    1cfa:	7b c0       	rjmp	.+246    	; 0x1df2 <GLCD_VidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8c 87       	std	Y+12, r24	; 0x0c
    1d16:	9d 87       	std	Y+13, r25	; 0x0d
    1d18:	ae 87       	std	Y+14, r26	; 0x0e
    1d1a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	88 87       	std	Y+8, r24	; 0x08
    1d36:	99 87       	std	Y+9, r25	; 0x09
    1d38:	aa 87       	std	Y+10, r26	; 0x0a
    1d3a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d3c:	68 85       	ldd	r22, Y+8	; 0x08
    1d3e:	79 85       	ldd	r23, Y+9	; 0x09
    1d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <GLCD_VidSendData+0x106>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9f 83       	std	Y+7, r25	; 0x07
    1d5a:	8e 83       	std	Y+6, r24	; 0x06
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <GLCD_VidSendData+0x184>
	else if (__tmp > 65535)
    1d5e:	68 85       	ldd	r22, Y+8	; 0x08
    1d60:	79 85       	ldd	r23, Y+9	; 0x09
    1d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <GLCD_VidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9f 83       	std	Y+7, r25	; 0x07
    1d9c:	8e 83       	std	Y+6, r24	; 0x06
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <GLCD_VidSendData+0x166>
    1da0:	80 e9       	ldi	r24, 0x90	; 144
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	9d 83       	std	Y+5, r25	; 0x05
    1da6:	8c 83       	std	Y+4, r24	; 0x04
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <GLCD_VidSendData+0x154>
    1db0:	9d 83       	std	Y+5, r25	; 0x05
    1db2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8e 81       	ldd	r24, Y+6	; 0x06
    1db6:	9f 81       	ldd	r25, Y+7	; 0x07
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9f 83       	std	Y+7, r25	; 0x07
    1dbc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <GLCD_VidSendData+0x148>
    1dc6:	24 c0       	rjmp	.+72     	; 0x1e10 <GLCD_VidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	68 85       	ldd	r22, Y+8	; 0x08
    1dca:	79 85       	ldd	r23, Y+9	; 0x09
    1dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9f 83       	std	Y+7, r25	; 0x07
    1dda:	8e 83       	std	Y+6, r24	; 0x06
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <GLCD_VidSendData+0x190>
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <GLCD_VidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1df2:	69 89       	ldd	r22, Y+17	; 0x11
    1df4:	7a 89       	ldd	r23, Y+18	; 0x12
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	88 8b       	std	Y+16, r24	; 0x10
    1e04:	88 89       	ldd	r24, Y+16	; 0x10
    1e06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	8a 95       	dec	r24
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <GLCD_VidSendData+0x1b2>
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_E_PIN,PIN_LOW);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	62 e0       	ldi	r22, 0x02	; 2
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
}
    1e1a:	69 96       	adiw	r28, 0x19	; 25
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <GLCD_VidClear>:
//Clear Screen
void GLCD_VidClear(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <GLCD_VidClear+0x6>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
	// Select CS1 & CS2 (Both Left & Right Sides)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	63 e0       	ldi	r22, 0x03	; 3
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	64 e0       	ldi	r22, 0x04	; 4
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>

	for(u8 i=0;i<8;i++)		//for All 8 Pages
    1e4a:	1a 82       	std	Y+2, r1	; 0x02
    1e4c:	12 c0       	rjmp	.+36     	; 0x1e72 <GLCD_VidClear+0x46>
	{
		GLCD_VidSendCommand(0xB8 + i);   //Increment Page
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	88 54       	subi	r24, 0x48	; 72
    1e52:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		for(u8 ii=0;ii<64;ii++)
    1e56:	19 82       	std	Y+1, r1	; 0x01
    1e58:	06 c0       	rjmp	.+12     	; 0x1e66 <GLCD_VidClear+0x3a>
		{
			GLCD_VidSendData(0x00);   //Write Zeros to All 64 Column
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);

	for(u8 i=0;i<8;i++)		//for All 8 Pages
	{
		GLCD_VidSendCommand(0xB8 + i);   //Increment Page
		for(u8 ii=0;ii<64;ii++)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	80 34       	cpi	r24, 0x40	; 64
    1e6a:	b8 f3       	brcs	.-18     	; 0x1e5a <GLCD_VidClear+0x2e>
{
	// Select CS1 & CS2 (Both Left & Right Sides)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);

	for(u8 i=0;i<8;i++)		//for All 8 Pages
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	8f 5f       	subi	r24, 0xFF	; 255
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	88 30       	cpi	r24, 0x08	; 8
    1e76:	58 f3       	brcs	.-42     	; 0x1e4e <GLCD_VidClear+0x22>
		for(u8 ii=0;ii<64;ii++)
		{
			GLCD_VidSendData(0x00);   //Write Zeros to All 64 Column
		}
	}
	GLCD_VidSendCommand(0xB8);   //Set Page to 0xB8
    1e78:	88 eb       	ldi	r24, 0xB8	; 184
    1e7a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(0x40);   //Set Column to address 0x40
    1e7e:	80 e4       	ldi	r24, 0x40	; 64
    1e80:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <GLCD_VidSetPosition>:
//Set Position in GLCD
void GLCD_VidSetPosition(u8 Copy_u8Page, u8 Copy_u8Column)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <GLCD_VidSetPosition+0x6>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	6a 83       	std	Y+2, r22	; 0x02
	Y = Copy_u8Column;
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	80 93 86 03 	sts	0x0386, r24
	X = Copy_u8Page;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	80 93 87 03 	sts	0x0387, r24

	if(Copy_u8Column < 64)
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	80 34       	cpi	r24, 0x40	; 64
    1eac:	98 f4       	brcc	.+38     	; 0x1ed4 <GLCD_VidSetPosition+0x46>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	63 e0       	ldi	r22, 0x03	; 3
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	64 e0       	ldi	r22, 0x04	; 4
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8 + Copy_u8Page);     //Set Page
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 54       	subi	r24, 0x48	; 72
    1ec6:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(0x40 + Copy_u8Column);   //Set Column
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	80 5c       	subi	r24, 0xC0	; 192
    1ece:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <GLCD_VidSetPosition+0x6e>
	}
	else if(Copy_u8Column >= 64)
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 34       	cpi	r24, 0x40	; 64
    1ed8:	88 f0       	brcs	.+34     	; 0x1efc <GLCD_VidSetPosition+0x6e>
	{
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	63 e0       	ldi	r22, 0x03	; 3
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	64 e0       	ldi	r22, 0x04	; 4
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	88 54       	subi	r24, 0x48	; 72
    1ef2:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(Copy_u8Column);        //Set Column
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	}
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <GLCD_VidSendString>:
//Send String
void GLCD_VidSendString(u8 *Copy_u8String)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <GLCD_VidSendString+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <GLCD_VidSendString+0x8>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    1f16:	1a 82       	std	Y+2, r1	; 0x02
	u8 ii;

	if(Y < 64)
    1f18:	80 91 86 03 	lds	r24, 0x0386
    1f1c:	80 34       	cpi	r24, 0x40	; 64
    1f1e:	58 f4       	brcc	.+22     	; 0x1f36 <GLCD_VidSendString+0x30>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1f34:	e7 c0       	rjmp	.+462    	; 0x2104 <GLCD_VidSendString+0x1fe>
	}
	else if(Y >= 64)
    1f36:	80 91 86 03 	lds	r24, 0x0386
    1f3a:	80 34       	cpi	r24, 0x40	; 64
    1f3c:	08 f4       	brcc	.+2      	; 0x1f40 <GLCD_VidSendString+0x3a>
    1f3e:	e2 c0       	rjmp	.+452    	; 0x2104 <GLCD_VidSendString+0x1fe>
	{
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	63 e0       	ldi	r22, 0x03	; 3
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    1f54:	d7 c0       	rjmp	.+430    	; 0x2104 <GLCD_VidSendString+0x1fe>
	}

	while (Copy_u8String[i] != '\0')   //Print char in string till null
	{
		for(ii = 0; ii < FontWidth; ii++ )   //For Every Column in Font Array
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	5b c0       	rjmp	.+182    	; 0x2010 <GLCD_VidSendString+0x10a>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    1f5a:	80 91 86 03 	lds	r24, 0x0386
    1f5e:	80 34       	cpi	r24, 0x40	; 64
    1f60:	91 f4       	brne	.+36     	; 0x1f86 <GLCD_VidSendString+0x80>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8+X);   //Set Page
    1f76:	80 91 87 03 	lds	r24, 0x0387
    1f7a:	88 54       	subi	r24, 0x48	; 72
    1f7c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    1f80:	80 e4       	ldi	r24, 0x40	; 64
    1f82:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    1f86:	80 91 86 03 	lds	r24, 0x0386
    1f8a:	80 38       	cpi	r24, 0x80	; 128
    1f8c:	c9 f4       	brne	.+50     	; 0x1fc0 <GLCD_VidSendString+0xba>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to tTe Next Page
    1fa2:	80 91 87 03 	lds	r24, 0x0387
    1fa6:	87 54       	subi	r24, 0x47	; 71
    1fa8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    1fac:	80 e4       	ldi	r24, 0x40	; 64
    1fae:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				X++;                             //Increment The Page Tracker Variable
    1fb2:	80 91 87 03 	lds	r24, 0x0387
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	80 93 87 03 	sts	0x0387, r24
				Y = 0;                           //Reset The Column Tracker Variable
    1fbc:	10 92 86 03 	sts	0x0386, r1
			}
			GLCD_VidSendData(font[Copy_u8String[i] - 32][ii]);   //Send Columns of the Char in Font Array
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	20 52       	subi	r18, 0x20	; 32
    1fda:	30 40       	sbci	r19, 0x00	; 0
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	48 2f       	mov	r20, r24
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	84 0f       	add	r24, r20
    1ff2:	95 1f       	adc	r25, r21
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	ea 55       	subi	r30, 0x5A	; 90
    1ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffa:	80 81       	ld	r24, Z
    1ffc:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                                                 //Increment The Column Tracker Variable
    2000:	80 91 86 03 	lds	r24, 0x0386
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	80 93 86 03 	sts	0x0386, r24
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
	}

	while (Copy_u8String[i] != '\0')   //Print char in string till null
	{
		for(ii = 0; ii < FontWidth; ii++ )   //For Every Column in Font Array
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	85 30       	cpi	r24, 0x05	; 5
    2014:	08 f4       	brcc	.+2      	; 0x2018 <GLCD_VidSendString+0x112>
    2016:	a1 cf       	rjmp	.-190    	; 0x1f5a <GLCD_VidSendString+0x54>
				Y = 0;                           //Reset The Column Tracker Variable
			}
			GLCD_VidSendData(font[Copy_u8String[i] - 32][ii]);   //Send Columns of the Char in Font Array
			Y++;                                                 //Increment The Column Tracker Variable
		}
		if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2018:	80 91 86 03 	lds	r24, 0x0386
    201c:	80 34       	cpi	r24, 0x40	; 64
    201e:	91 f4       	brne	.+36     	; 0x2044 <GLCD_VidSendString+0x13e>
		{
			//Select CS2 (Right Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	63 e0       	ldi	r22, 0x03	; 3
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	64 e0       	ldi	r22, 0x04	; 4
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X);   //Set Page
    2034:	80 91 87 03 	lds	r24, 0x0387
    2038:	88 54       	subi	r24, 0x48	; 72
    203a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    203e:	80 e4       	ldi	r24, 0x40	; 64
    2040:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		}
		if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2044:	80 91 86 03 	lds	r24, 0x0386
    2048:	80 38       	cpi	r24, 0x80	; 128
    204a:	c9 f4       	brne	.+50     	; 0x207e <GLCD_VidSendString+0x178>
		{
			//Select CS1 (Left Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	63 e0       	ldi	r22, 0x03	; 3
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	64 e0       	ldi	r22, 0x04	; 4
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to The Next Page
    2060:	80 91 87 03 	lds	r24, 0x0387
    2064:	87 54       	subi	r24, 0x47	; 71
    2066:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    206a:	80 e4       	ldi	r24, 0x40	; 64
    206c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			X++;                             //Increment The Page Tracker Variable
    2070:	80 91 87 03 	lds	r24, 0x0387
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	80 93 87 03 	sts	0x0387, r24
			Y = 0;                           //Reset The Column Tracker Variable
    207a:	10 92 86 03 	sts	0x0386, r1
		}
		if((Copy_u8String[i+1] != 32) && (Copy_u8String[i] != 32) && (Y != 0) && (font[Copy_u8String[i] - 32][FontWidth - 1]) !=0x00)   //If The Char is Space or The Next Char is Space or The Character is at Column 0 or The Last Column of The Character is 0x00
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 01       	movw	r18, r24
    2086:	2f 5f       	subi	r18, 0xFF	; 255
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	fc 01       	movw	r30, r24
    2090:	e2 0f       	add	r30, r18
    2092:	f3 1f       	adc	r31, r19
    2094:	80 81       	ld	r24, Z
    2096:	80 32       	cpi	r24, 0x20	; 32
    2098:	91 f1       	breq	.+100    	; 0x20fe <GLCD_VidSendString+0x1f8>
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	80 81       	ld	r24, Z
    20ac:	80 32       	cpi	r24, 0x20	; 32
    20ae:	39 f1       	breq	.+78     	; 0x20fe <GLCD_VidSendString+0x1f8>
    20b0:	80 91 86 03 	lds	r24, 0x0386
    20b4:	88 23       	and	r24, r24
    20b6:	19 f1       	breq	.+70     	; 0x20fe <GLCD_VidSendString+0x1f8>
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	fc 01       	movw	r30, r24
    20c4:	e2 0f       	add	r30, r18
    20c6:	f3 1f       	adc	r31, r19
    20c8:	80 81       	ld	r24, Z
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 01       	movw	r18, r24
    20d0:	20 52       	subi	r18, 0x20	; 32
    20d2:	30 40       	sbci	r19, 0x00	; 0
    20d4:	c9 01       	movw	r24, r18
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	fc 01       	movw	r30, r24
    20e4:	e6 55       	subi	r30, 0x56	; 86
    20e6:	fe 4f       	sbci	r31, 0xFE	; 254
    20e8:	80 81       	ld	r24, Z
    20ea:	88 23       	and	r24, r24
    20ec:	41 f0       	breq	.+16     	; 0x20fe <GLCD_VidSendString+0x1f8>
		{
			GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    20f4:	80 91 86 03 	lds	r24, 0x0386
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	80 93 86 03 	sts	0x0386, r24
		}
		i++;   //Increment to the next Char in The String
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	8a 83       	std	Y+2, r24	; 0x02
		//Select CS2 (Right Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
	}

	while (Copy_u8String[i] != '\0')   //Print char in string till null
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	fc 01       	movw	r30, r24
    2110:	e2 0f       	add	r30, r18
    2112:	f3 1f       	adc	r31, r19
    2114:	80 81       	ld	r24, Z
    2116:	88 23       	and	r24, r24
    2118:	09 f0       	breq	.+2      	; 0x211c <GLCD_VidSendString+0x216>
    211a:	1d cf       	rjmp	.-454    	; 0x1f56 <GLCD_VidSendString+0x50>
			GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
			Y++;                      //Increment The Column Tracker Variable
		}
		i++;   //Increment to the next Char in The String
	}
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <GLCD_VidSendingNumber>:
//Send Number to GLCD
void GLCD_VidSendingNumber(u8 Copy_u8Number)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <GLCD_VidSendingNumber+0x6>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 ii = 0; ii < FontWidth; ii++ )   //For Every Column in Font Array
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	33 c0       	rjmp	.+102    	; 0x21a0 <GLCD_VidSendingNumber+0x76>
	{
		if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    213a:	80 91 86 03 	lds	r24, 0x0386
    213e:	80 34       	cpi	r24, 0x40	; 64
    2140:	91 f4       	brne	.+36     	; 0x2166 <GLCD_VidSendingNumber+0x3c>
		{
			//Select CS2 (Right Side)
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	63 e0       	ldi	r22, 0x03	; 3
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	64 e0       	ldi	r22, 0x04	; 4
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			GLCD_VidSendCommand(0xB8+X);   //Set Page
    2156:	80 91 87 03 	lds	r24, 0x0387
    215a:	88 54       	subi	r24, 0x48	; 72
    215c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    2160:	80 e4       	ldi	r24, 0x40	; 64
    2162:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		}
		GLCD_VidSendData(font[Copy_u8Number][ii]);   //Send Number to GLCD
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	48 2f       	mov	r20, r24
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	c9 01       	movw	r24, r18
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	82 0f       	add	r24, r18
    217e:	93 1f       	adc	r25, r19
    2180:	84 0f       	add	r24, r20
    2182:	95 1f       	adc	r25, r21
    2184:	fc 01       	movw	r30, r24
    2186:	ea 55       	subi	r30, 0x5A	; 90
    2188:	fe 4f       	sbci	r31, 0xFE	; 254
    218a:	80 81       	ld	r24, Z
    218c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
		Y++;                                         //Increment The Column Tracker Variable
    2190:	80 91 86 03 	lds	r24, 0x0386
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	80 93 86 03 	sts	0x0386, r24
	}
}
//Send Number to GLCD
void GLCD_VidSendingNumber(u8 Copy_u8Number)
{
	for(u8 ii = 0; ii < FontWidth; ii++ )   //For Every Column in Font Array
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	85 30       	cpi	r24, 0x05	; 5
    21a4:	50 f2       	brcs	.-108    	; 0x213a <GLCD_VidSendingNumber+0x10>
			GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
		}
		GLCD_VidSendData(font[Copy_u8Number][ii]);   //Send Number to GLCD
		Y++;                                         //Increment The Column Tracker Variable
	}
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <GLCD_VidSendNumber>:
//Prepare Number to be Sent to GLCD
void GLCD_VidSendNumber(f32 Copy_f32Number)
{
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	a4 97       	sbiw	r28, 0x24	; 36
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	69 a3       	std	Y+33, r22	; 0x21
    21ca:	7a a3       	std	Y+34, r23	; 0x22
    21cc:	8b a3       	std	Y+35, r24	; 0x23
    21ce:	9c a3       	std	Y+36, r25	; 0x24
	u8 Arr[10];   //Array to Store Number
	u8 i = 0;
    21d0:	1e 8a       	std	Y+22, r1	; 0x16
	u8 j = 0;
    21d2:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Number_Float_Exist = 0;   //Variable to Check For Float Number
    21d4:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Dot = 0;		//Variable to Save Place For '.' to be Represented in Case of Float Numbers
    21d6:	1b 8a       	std	Y+19, r1	; 0x13
	u32 Number_int = Copy_f32Number;   //Store Integral Part of The Number
    21d8:	69 a1       	ldd	r22, Y+33	; 0x21
    21da:	7a a1       	ldd	r23, Y+34	; 0x22
    21dc:	8b a1       	ldd	r24, Y+35	; 0x23
    21de:	9c a1       	ldd	r25, Y+36	; 0x24
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	98 8b       	std	Y+16, r25	; 0x10
    21ec:	a9 8b       	std	Y+17, r26	; 0x11
    21ee:	ba 8b       	std	Y+18, r27	; 0x12
	u32 Number_int_Copy = Copy_f32Number;	//Variable to Count Integral Numbers
    21f0:	69 a1       	ldd	r22, Y+33	; 0x21
    21f2:	7a a1       	ldd	r23, Y+34	; 0x22
    21f4:	8b a1       	ldd	r24, Y+35	; 0x23
    21f6:	9c a1       	ldd	r25, Y+36	; 0x24
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8b 87       	std	Y+11, r24	; 0x0b
    2202:	9c 87       	std	Y+12, r25	; 0x0c
    2204:	ad 87       	std	Y+13, r26	; 0x0d
    2206:	be 87       	std	Y+14, r27	; 0x0e
	f32 Number_float = (Copy_f32Number - Number_int);   //Store Float Part of The Number
    2208:	6f 85       	ldd	r22, Y+15	; 0x0f
    220a:	78 89       	ldd	r23, Y+16	; 0x10
    220c:	89 89       	ldd	r24, Y+17	; 0x11
    220e:	9a 89       	ldd	r25, Y+18	; 0x12
    2210:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	69 a1       	ldd	r22, Y+33	; 0x21
    221a:	7a a1       	ldd	r23, Y+34	; 0x22
    221c:	8b a1       	ldd	r24, Y+35	; 0x23
    221e:	9c a1       	ldd	r25, Y+36	; 0x24
    2220:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	f32 Number_float_remain = 0;	//Variable to Store Float Number Remain
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e0       	ldi	r26, 0x00	; 0
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	ad 83       	std	Y+5, r26	; 0x05
    223e:	be 83       	std	Y+6, r27	; 0x06
    2240:	15 c0       	rjmp	.+42     	; 0x226c <GLCD_VidSendNumber+0xbc>

	while(Number_int_Copy != 0)   //While The Integral Part is Not Zero
	{
		Number_int_Copy/=10;           //Divide By 10
    2242:	8b 85       	ldd	r24, Y+11	; 0x0b
    2244:	9c 85       	ldd	r25, Y+12	; 0x0c
    2246:	ad 85       	ldd	r26, Y+13	; 0x0d
    2248:	be 85       	ldd	r27, Y+14	; 0x0e
    224a:	2a e0       	ldi	r18, 0x0A	; 10
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 1e 1b 	call	0x363c	; 0x363c <__udivmodsi4>
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
		j++;                      //Count Integral Numbers
    2266:	8d 89       	ldd	r24, Y+21	; 0x15
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	8d 8b       	std	Y+21, r24	; 0x15
	u32 Number_int = Copy_f32Number;   //Store Integral Part of The Number
	u32 Number_int_Copy = Copy_f32Number;	//Variable to Count Integral Numbers
	f32 Number_float = (Copy_f32Number - Number_int);   //Store Float Part of The Number
	f32 Number_float_remain = 0;	//Variable to Store Float Number Remain

	while(Number_int_Copy != 0)   //While The Integral Part is Not Zero
    226c:	8b 85       	ldd	r24, Y+11	; 0x0b
    226e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2270:	ad 85       	ldd	r26, Y+13	; 0x0d
    2272:	be 85       	ldd	r27, Y+14	; 0x0e
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	a1 05       	cpc	r26, r1
    2278:	b1 05       	cpc	r27, r1
    227a:	19 f7       	brne	.-58     	; 0x2242 <GLCD_VidSendNumber+0x92>
	{
		Number_int_Copy/=10;           //Divide By 10
		j++;                      //Count Integral Numbers
	}

	if(Number_int == 0)  //Save Place For Zero if Integral Number is Zero
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	a9 89       	ldd	r26, Y+17	; 0x11
    2282:	ba 89       	ldd	r27, Y+18	; 0x12
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	a1 05       	cpc	r26, r1
    2288:	b1 05       	cpc	r27, r1
    228a:	11 f4       	brne	.+4      	; 0x2290 <GLCD_VidSendNumber+0xe0>
	{
		j = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	8d 8b       	std	Y+21, r24	; 0x15
	}

	if(Number_float !=0)   //Check If There is Float Numbers to Add Their Places
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    22a4:	88 23       	and	r24, r24
    22a6:	21 f0       	breq	.+8      	; 0x22b0 <GLCD_VidSendNumber+0x100>
	{
		Number_Float_Exist = 3;		//For 3 Decimal Point Precision
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	8c 8b       	std	Y+20, r24	; 0x14
		Dot = 5;	//Dot Represented in 5 Lines
    22ac:	85 e0       	ldi	r24, 0x05	; 5
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
	}

	if((Y+(((j+Number_Float_Exist)*6)+Dot)) > 128)   //Calculate Places Needed to Represent The Number Including Spaces between Numbers & Check If Its Larger Than 128 (Max Size of The GLCD)
    22b0:	80 91 86 03 	lds	r24, 0x0386
    22b4:	48 2f       	mov	r20, r24
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	8d 89       	ldd	r24, Y+21	; 0x15
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8c 89       	ldd	r24, Y+20	; 0x14
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	28 0f       	add	r18, r24
    22c6:	39 1f       	adc	r19, r25
    22c8:	c9 01       	movw	r24, r18
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	9c 01       	movw	r18, r24
    22d8:	8b 89       	ldd	r24, Y+19	; 0x13
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	84 0f       	add	r24, r20
    22e4:	95 1f       	adc	r25, r21
    22e6:	81 38       	cpi	r24, 0x81	; 129
    22e8:	91 05       	cpc	r25, r1
    22ea:	cc f0       	brlt	.+50     	; 0x231e <GLCD_VidSendNumber+0x16e>
	{
		//Select CS1 (Left Side)
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	63 e0       	ldi	r22, 0x03	; 3
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	64 e0       	ldi	r22, 0x04	; 4
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
		GLCD_VidSendCommand(0xB8+X+1);   //Set Page & Increment to The Next Page
    2300:	80 91 87 03 	lds	r24, 0x0387
    2304:	87 54       	subi	r24, 0x47	; 71
    2306:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		GLCD_VidSendCommand(0x40);       //Set Column to address 0x40
    230a:	80 e4       	ldi	r24, 0x40	; 64
    230c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
		X++;                             //Increment The Page Tracker Variable
    2310:	80 91 87 03 	lds	r24, 0x0387
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	80 93 87 03 	sts	0x0387, r24
		Y = 0;                           //Reset The Column Tracker Variable
    231a:	10 92 86 03 	sts	0x0386, r1
	}
	if(Copy_f32Number != 0)   //If The Number is Not Zero (Both Integral & Float Part)
    231e:	69 a1       	ldd	r22, Y+33	; 0x21
    2320:	7a a1       	ldd	r23, Y+34	; 0x22
    2322:	8b a1       	ldd	r24, Y+35	; 0x23
    2324:	9c a1       	ldd	r25, Y+36	; 0x24
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2332:	88 23       	and	r24, r24
    2334:	09 f4       	brne	.+2      	; 0x2338 <GLCD_VidSendNumber+0x188>
    2336:	63 c1       	rjmp	.+710    	; 0x25fe <GLCD_VidSendNumber+0x44e>
	{
		if(Number_int != 0)   //If The Integral Part is Not Zero
    2338:	8f 85       	ldd	r24, Y+15	; 0x0f
    233a:	98 89       	ldd	r25, Y+16	; 0x10
    233c:	a9 89       	ldd	r26, Y+17	; 0x11
    233e:	ba 89       	ldd	r27, Y+18	; 0x12
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	a1 05       	cpc	r26, r1
    2344:	b1 05       	cpc	r27, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <GLCD_VidSendNumber+0x19a>
    2348:	90 c0       	rjmp	.+288    	; 0x246a <GLCD_VidSendNumber+0x2ba>
		{
			j = 0;
    234a:	1d 8a       	std	Y+21, r1	; 0x15
    234c:	2d c0       	rjmp	.+90     	; 0x23a8 <GLCD_VidSendNumber+0x1f8>
			while(Number_int != 0)   //While The Integral Part is Not Zero
			{
				Arr[j] = Number_int%10;   //Store The Reminder in The Array
    234e:	8d 89       	ldd	r24, Y+21	; 0x15
    2350:	08 2f       	mov	r16, r24
    2352:	10 e0       	ldi	r17, 0x00	; 0
    2354:	8f 85       	ldd	r24, Y+15	; 0x0f
    2356:	98 89       	ldd	r25, Y+16	; 0x10
    2358:	a9 89       	ldd	r26, Y+17	; 0x11
    235a:	ba 89       	ldd	r27, Y+18	; 0x12
    235c:	2a e0       	ldi	r18, 0x0A	; 10
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 1e 1b 	call	0x363c	; 0x363c <__udivmodsi4>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	28 2f       	mov	r18, r24
    2372:	ce 01       	movw	r24, r28
    2374:	47 96       	adiw	r24, 0x17	; 23
    2376:	fc 01       	movw	r30, r24
    2378:	e0 0f       	add	r30, r16
    237a:	f1 1f       	adc	r31, r17
    237c:	20 83       	st	Z, r18
				Number_int/=10;           //Divide By 10
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	98 89       	ldd	r25, Y+16	; 0x10
    2382:	a9 89       	ldd	r26, Y+17	; 0x11
    2384:	ba 89       	ldd	r27, Y+18	; 0x12
    2386:	2a e0       	ldi	r18, 0x0A	; 10
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 1e 1b 	call	0x363c	; 0x363c <__udivmodsi4>
    2396:	da 01       	movw	r26, r20
    2398:	c9 01       	movw	r24, r18
    239a:	8f 87       	std	Y+15, r24	; 0x0f
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	a9 8b       	std	Y+17, r26	; 0x11
    23a0:	ba 8b       	std	Y+18, r27	; 0x12
				j++;                      //Increment to The Next Position in The Array
    23a2:	8d 89       	ldd	r24, Y+21	; 0x15
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	8d 8b       	std	Y+21, r24	; 0x15
	if(Copy_f32Number != 0)   //If The Number is Not Zero (Both Integral & Float Part)
	{
		if(Number_int != 0)   //If The Integral Part is Not Zero
		{
			j = 0;
			while(Number_int != 0)   //While The Integral Part is Not Zero
    23a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23aa:	98 89       	ldd	r25, Y+16	; 0x10
    23ac:	a9 89       	ldd	r26, Y+17	; 0x11
    23ae:	ba 89       	ldd	r27, Y+18	; 0x12
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	a1 05       	cpc	r26, r1
    23b4:	b1 05       	cpc	r27, r1
    23b6:	59 f6       	brne	.-106    	; 0x234e <GLCD_VidSendNumber+0x19e>
				Number_int/=10;           //Divide By 10
				j++;                      //Increment to The Next Position in The Array
			}

			//Print The Integral Part on The GLCD
			if(Y < 64)   //If Start Column is in the Left Side of The GLCD
    23b8:	80 91 86 03 	lds	r24, 0x0386
    23bc:	80 34       	cpi	r24, 0x40	; 64
    23be:	58 f4       	brcc	.+22     	; 0x23d6 <GLCD_VidSendNumber+0x226>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	63 e0       	ldi	r22, 0x03	; 3
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	64 e0       	ldi	r22, 0x04	; 4
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    23d4:	0e c0       	rjmp	.+28     	; 0x23f2 <GLCD_VidSendNumber+0x242>
			}
			else if(Y >= 64)   //If Start Column is in the Right Side of The GLCD
    23d6:	80 91 86 03 	lds	r24, 0x0386
    23da:	80 34       	cpi	r24, 0x40	; 64
    23dc:	50 f0       	brcs	.+20     	; 0x23f2 <GLCD_VidSendNumber+0x242>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	63 e0       	ldi	r22, 0x03	; 3
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	64 e0       	ldi	r22, 0x04	; 4
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			}

			for(s8 jj=j-1;jj>=0;jj--)  //For All Integral Numbers
    23f2:	8d 89       	ldd	r24, Y+21	; 0x15
    23f4:	81 50       	subi	r24, 0x01	; 1
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	34 c0       	rjmp	.+104    	; 0x2462 <GLCD_VidSendNumber+0x2b2>
			{
				GLCD_VidSendingNumber((Arr[jj]+16));   //Send Numbers to GLCD
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	33 27       	eor	r19, r19
    2400:	27 fd       	sbrc	r18, 7
    2402:	30 95       	com	r19
    2404:	ce 01       	movw	r24, r28
    2406:	47 96       	adiw	r24, 0x17	; 23
    2408:	fc 01       	movw	r30, r24
    240a:	e2 0f       	add	r30, r18
    240c:	f3 1f       	adc	r31, r19
    240e:	80 81       	ld	r24, Z
    2410:	80 5f       	subi	r24, 0xF0	; 240
    2412:	0e 94 95 10 	call	0x212a	; 0x212a <GLCD_VidSendingNumber>

				if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2416:	80 91 86 03 	lds	r24, 0x0386
    241a:	80 34       	cpi	r24, 0x40	; 64
    241c:	b9 f4       	brne	.+46     	; 0x244c <GLCD_VidSendNumber+0x29c>
				{
					//Select CS2 (Right Side)
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	63 e0       	ldi	r22, 0x03	; 3
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					GLCD_VidSendCommand(0xB8+X);   //Set Page
    2432:	80 91 87 03 	lds	r24, 0x0387
    2436:	88 54       	subi	r24, 0x48	; 72
    2438:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    243c:	80 e4       	ldi	r24, 0x40	; 64
    243e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					Y++;                           //Increment The Column Tracker Variable
    2442:	80 91 86 03 	lds	r24, 0x0386
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	80 93 86 03 	sts	0x0386, r24
				}
				GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
				Y++;                      //Increment The Column Tracker Variable
    2452:	80 91 86 03 	lds	r24, 0x0386
    2456:	8f 5f       	subi	r24, 0xFF	; 255
    2458:	80 93 86 03 	sts	0x0386, r24
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
			}

			for(s8 jj=j-1;jj>=0;jj--)  //For All Integral Numbers
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	81 50       	subi	r24, 0x01	; 1
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	88 23       	and	r24, r24
    2466:	4c f6       	brge	.-110    	; 0x23fa <GLCD_VidSendNumber+0x24a>
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <GLCD_VidSendNumber+0x2c0>
				Y++;                      //Increment The Column Tracker Variable
			}
		}
		else
		{
			GLCD_VidSendingNumber(16);   //Send '0'
    246a:	80 e1       	ldi	r24, 0x10	; 16
    246c:	0e 94 95 10 	call	0x212a	; 0x212a <GLCD_VidSendingNumber>
		}

		if(Number_float != 0)   //If The Float Part is Not Zero
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    2484:	88 23       	and	r24, r24
    2486:	09 f4       	brne	.+2      	; 0x248a <GLCD_VidSendNumber+0x2da>
    2488:	c5 c0       	rjmp	.+394    	; 0x2614 <GLCD_VidSendNumber+0x464>
		{
			GLCD_VidSendingNumber(14);  //Send '.'
    248a:	8e e0       	ldi	r24, 0x0E	; 14
    248c:	0e 94 95 10 	call	0x212a	; 0x212a <GLCD_VidSendingNumber>
			j = 0;
    2490:	1d 8a       	std	Y+21, r1	; 0x15
    2492:	5b c0       	rjmp	.+182    	; 0x254a <GLCD_VidSendNumber+0x39a>
			while(i<3)   //For 3 Decimal Point Precision
			{
				Arr[j] = (Number_float*10);                      //Store The Number in The Array
    2494:	8d 89       	ldd	r24, Y+21	; 0x15
    2496:	08 2f       	mov	r16, r24
    2498:	10 e0       	ldi	r17, 0x00	; 0
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	28 2f       	mov	r18, r24
    24c0:	ce 01       	movw	r24, r28
    24c2:	47 96       	adiw	r24, 0x17	; 23
    24c4:	fc 01       	movw	r30, r24
    24c6:	e0 0f       	add	r30, r16
    24c8:	f1 1f       	adc	r31, r17
    24ca:	20 83       	st	Z, r18
				Number_float = (Number_float*10);                //Multiply By 10
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	8f 83       	std	Y+7, r24	; 0x07
    24e6:	98 87       	std	Y+8, r25	; 0x08
    24e8:	a9 87       	std	Y+9, r26	; 0x09
    24ea:	ba 87       	std	Y+10, r27	; 0x0a
				Number_float_remain = (Number_float - Arr[j]);   //Store The Remain Numbers to Be Saved in The Array
    24ec:	8d 89       	ldd	r24, Y+21	; 0x15
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	ce 01       	movw	r24, r28
    24f4:	47 96       	adiw	r24, 0x17	; 23
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 0f       	add	r30, r18
    24fa:	f3 1f       	adc	r31, r19
    24fc:	80 81       	ld	r24, Z
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	aa 27       	eor	r26, r26
    2504:	97 fd       	sbrc	r25, 7
    2506:	a0 95       	com	r26
    2508:	ba 2f       	mov	r27, r26
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2512:	9b 01       	movw	r18, r22
    2514:	ac 01       	movw	r20, r24
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8b 83       	std	Y+3, r24	; 0x03
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	ad 83       	std	Y+5, r26	; 0x05
    252c:	be 83       	std	Y+6, r27	; 0x06
				Number_float = Number_float_remain;              //Update The Float Number
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	ad 81       	ldd	r26, Y+5	; 0x05
    2534:	be 81       	ldd	r27, Y+6	; 0x06
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
				j++;                                             //Increment to The Next Position in The Array
    253e:	8d 89       	ldd	r24, Y+21	; 0x15
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	8d 8b       	std	Y+21, r24	; 0x15
				i++;
    2544:	8e 89       	ldd	r24, Y+22	; 0x16
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	8e 8b       	std	Y+22, r24	; 0x16

		if(Number_float != 0)   //If The Float Part is Not Zero
		{
			GLCD_VidSendingNumber(14);  //Send '.'
			j = 0;
			while(i<3)   //For 3 Decimal Point Precision
    254a:	8e 89       	ldd	r24, Y+22	; 0x16
    254c:	83 30       	cpi	r24, 0x03	; 3
    254e:	08 f4       	brcc	.+2      	; 0x2552 <GLCD_VidSendNumber+0x3a2>
    2550:	a1 cf       	rjmp	.-190    	; 0x2494 <GLCD_VidSendNumber+0x2e4>
				Number_float = Number_float_remain;              //Update The Float Number
				j++;                                             //Increment to The Next Position in The Array
				i++;
			}
			//Print The Float Part on The GLCD
			if(Y < 64)   //If Start Column is in the Left Side of The GLCD
    2552:	80 91 86 03 	lds	r24, 0x0386
    2556:	80 34       	cpi	r24, 0x40	; 64
    2558:	58 f4       	brcc	.+22     	; 0x2570 <GLCD_VidSendNumber+0x3c0>
			{
				//Select CS1 (Left Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	63 e0       	ldi	r22, 0x03	; 3
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	64 e0       	ldi	r22, 0x04	; 4
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <GLCD_VidSendNumber+0x3dc>
			}
			else if(Y >= 64)   //If Start Column is in the Right Side of The GLCD
    2570:	80 91 86 03 	lds	r24, 0x0386
    2574:	80 34       	cpi	r24, 0x40	; 64
    2576:	50 f0       	brcs	.+20     	; 0x258c <GLCD_VidSendNumber+0x3dc>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	63 e0       	ldi	r22, 0x03	; 3
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
			}

			for(u8 jj=0;jj<j;jj++)   //For All Float Numbers
    258c:	19 82       	std	Y+1, r1	; 0x01
    258e:	32 c0       	rjmp	.+100    	; 0x25f4 <GLCD_VidSendNumber+0x444>
			{
				GLCD_VidSendingNumber((Arr[jj]+16));	//Send Numbers to GLCD
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	ce 01       	movw	r24, r28
    2598:	47 96       	adiw	r24, 0x17	; 23
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	80 81       	ld	r24, Z
    25a2:	80 5f       	subi	r24, 0xF0	; 240
    25a4:	0e 94 95 10 	call	0x212a	; 0x212a <GLCD_VidSendingNumber>
				if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    25a8:	80 91 86 03 	lds	r24, 0x0386
    25ac:	80 34       	cpi	r24, 0x40	; 64
    25ae:	b9 f4       	brne	.+46     	; 0x25de <GLCD_VidSendNumber+0x42e>
				{
					//Select CS2 (Right Side)
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	63 e0       	ldi	r22, 0x03	; 3
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
					GLCD_VidSendCommand(0xB8+X);   //Set Page
    25c4:	80 91 87 03 	lds	r24, 0x0387
    25c8:	88 54       	subi	r24, 0x48	; 72
    25ca:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					GLCD_VidSendCommand(0x40);     //Set Column to address 0x40
    25ce:	80 e4       	ldi	r24, 0x40	; 64
    25d0:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
					Y++;                           //Increment The Column Tracker Variable
    25d4:	80 91 86 03 	lds	r24, 0x0386
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	80 93 86 03 	sts	0x0386, r24
				}
				GLCD_VidSendData(0x00);   //Send Zeroes to Display Space between Characters
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
				Y++;                      //Increment The Column Tracker Variable
    25e4:	80 91 86 03 	lds	r24, 0x0386
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	80 93 86 03 	sts	0x0386, r24
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
			}

			for(u8 jj=0;jj<j;jj++)   //For All Float Numbers
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	8d 89       	ldd	r24, Y+21	; 0x15
    25f8:	98 17       	cp	r25, r24
    25fa:	50 f2       	brcs	.-108    	; 0x2590 <GLCD_VidSendNumber+0x3e0>
    25fc:	0b c0       	rjmp	.+22     	; 0x2614 <GLCD_VidSendNumber+0x464>
			//Do Nothing
		}
	}
	else   //If The Number is Zero (Both Integral & Float Part)
	{
		GLCD_VidSendingNumber(16);   //Send '0'
    25fe:	80 e1       	ldi	r24, 0x10	; 16
    2600:	0e 94 95 10 	call	0x212a	; 0x212a <GLCD_VidSendingNumber>
		GLCD_VidSendData(0x00);      //Send Zeroes to Display Space between Characters
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
		Y++;                         //Increment The Column Tracker Variable
    260a:	80 91 86 03 	lds	r24, 0x0386
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	80 93 86 03 	sts	0x0386, r24
	}
}
    2614:	a4 96       	adiw	r28, 0x24	; 36
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <GLCD_VidDrawPWM>:
//Draw PWM Waveform
void GLCD_VidDrawPWM(u8 Copy_u8Page, f32 Frequency, f32 DutyCycle)
{
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	60 97       	sbiw	r28, 0x10	; 16
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	88 87       	std	Y+8, r24	; 0x08
    2644:	49 87       	std	Y+9, r20	; 0x09
    2646:	5a 87       	std	Y+10, r21	; 0x0a
    2648:	6b 87       	std	Y+11, r22	; 0x0b
    264a:	7c 87       	std	Y+12, r23	; 0x0c
    264c:	0d 87       	std	Y+13, r16	; 0x0d
    264e:	1e 87       	std	Y+14, r17	; 0x0e
    2650:	2f 87       	std	Y+15, r18	; 0x0f
    2652:	38 8b       	std	Y+16, r19	; 0x10
	Y = 0;   //Reset Column Tracker Variable
    2654:	10 92 86 03 	sts	0x0386, r1
	u8 PWMNumber = round(((Frequency*1000)+190)/250);   //Calculate Max Number of Waves to be Displayed in 128 Column
    2658:	69 85       	ldd	r22, Y+9	; 0x09
    265a:	7a 85       	ldd	r23, Y+10	; 0x0a
    265c:	8b 85       	ldd	r24, Y+11	; 0x0b
    265e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	54 e4       	ldi	r21, 0x44	; 68
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4e e3       	ldi	r20, 0x3E	; 62
    267a:	53 e4       	ldi	r21, 0x43	; 67
    267c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a e7       	ldi	r20, 0x7A	; 122
    268e:	53 e4       	ldi	r21, 0x43	; 67
    2690:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 8b 1b 	call	0x3716	; 0x3716 <round>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8f 83       	std	Y+7, r24	; 0x07
	u8 PWMLength = (128/PWMNumber);   //Calculate Wave Length
    26b2:	8f 81       	ldd	r24, Y+7	; 0x07
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	80 e8       	ldi	r24, 0x80	; 128
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	b9 01       	movw	r22, r18
    26be:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__divmodhi4>
    26c2:	cb 01       	movw	r24, r22
    26c4:	8e 83       	std	Y+6, r24	; 0x06
	u8 Level = (PWMLength - 2);   //Subtract 2 From The WaveLength to be Represented as Edges
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	82 50       	subi	r24, 0x02	; 2
    26ca:	8d 83       	std	Y+5, r24	; 0x05
	u8 Ton = round((Level*DutyCycle)/100);   //Calculate Ton
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	aa 27       	eor	r26, r26
    26d4:	97 fd       	sbrc	r25, 7
    26d6:	a0 95       	com	r26
    26d8:	ba 2f       	mov	r27, r26
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    26ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    26ee:	4f 85       	ldd	r20, Y+15	; 0x0f
    26f0:	58 89       	ldd	r21, Y+16	; 0x10
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	48 ec       	ldi	r20, 0xC8	; 200
    2704:	52 e4       	ldi	r21, 0x42	; 66
    2706:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 8b 1b 	call	0x3716	; 0x3716 <round>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8c 83       	std	Y+4, r24	; 0x04
	u8 Toff = (Level - Ton);   //Calculate Toff
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	29 2f       	mov	r18, r25
    272e:	28 1b       	sub	r18, r24
    2730:	82 2f       	mov	r24, r18
    2732:	8b 83       	std	Y+3, r24	; 0x03

	//Select CS1 (Left Side)
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_HIGH);
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	63 e0       	ldi	r22, 0x03	; 3
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_LOW);
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
	GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2748:	88 85       	ldd	r24, Y+8	; 0x08
    274a:	88 54       	subi	r24, 0x48	; 72
    274c:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
	GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2750:	80 e4       	ldi	r24, 0x40	; 64
    2752:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>

	while(1)   //While Not Reaching The End of The GLCD
	{
		for(u8 i=0;i<Ton;i++)   //For High Level Period (Ton)
    2756:	1a 82       	std	Y+2, r1	; 0x02
    2758:	25 c0       	rjmp	.+74     	; 0x27a4 <GLCD_VidDrawPWM+0x17a>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    275a:	80 91 86 03 	lds	r24, 0x0386
    275e:	80 34       	cpi	r24, 0x40	; 64
    2760:	89 f4       	brne	.+34     	; 0x2784 <GLCD_VidDrawPWM+0x15a>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	63 e0       	ldi	r22, 0x03	; 3
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	64 e0       	ldi	r22, 0x04	; 4
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    2776:	88 85       	ldd	r24, Y+8	; 0x08
    2778:	88 54       	subi	r24, 0x48	; 72
    277a:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    277e:	80 e4       	ldi	r24, 0x40	; 64
    2780:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    2784:	80 91 86 03 	lds	r24, 0x0386
    2788:	80 38       	cpi	r24, 0x80	; 128
    278a:	09 f4       	brne	.+2      	; 0x278e <GLCD_VidDrawPWM+0x164>
    278c:	8b c0       	rjmp	.+278    	; 0x28a4 <GLCD_VidDrawPWM+0x27a>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0x01);   //Send 0x01 to Display High Level
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2794:	80 91 86 03 	lds	r24, 0x0386
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	80 93 86 03 	sts	0x0386, r24
	GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
	GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40

	while(1)   //While Not Reaching The End of The GLCD
	{
		for(u8 i=0;i<Ton;i++)   //For High Level Period (Ton)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	8f 5f       	subi	r24, 0xFF	; 255
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	8c 81       	ldd	r24, Y+4	; 0x04
    27a8:	98 17       	cp	r25, r24
    27aa:	b8 f2       	brcs	.-82     	; 0x275a <GLCD_VidDrawPWM+0x130>
			}
			GLCD_VidSendData(0x01);   //Send 0x01 to Display High Level
			Y++;                      //Increment The Column Tracker Variable
		}

		if((Toff != 0) && (Ton != 0))   //If the Wave is not fully High/Low Level
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	88 23       	and	r24, r24
    27b0:	29 f1       	breq	.+74     	; 0x27fc <GLCD_VidDrawPWM+0x1d2>
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	88 23       	and	r24, r24
    27b6:	11 f1       	breq	.+68     	; 0x27fc <GLCD_VidDrawPWM+0x1d2>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    27b8:	80 91 86 03 	lds	r24, 0x0386
    27bc:	80 34       	cpi	r24, 0x40	; 64
    27be:	89 f4       	brne	.+34     	; 0x27e2 <GLCD_VidDrawPWM+0x1b8>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	63 e0       	ldi	r22, 0x03	; 3
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    27d4:	88 85       	ldd	r24, Y+8	; 0x08
    27d6:	88 54       	subi	r24, 0x48	; 72
    27d8:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    27dc:	80 e4       	ldi	r24, 0x40	; 64
    27de:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    27e2:	80 91 86 03 	lds	r24, 0x0386
    27e6:	80 38       	cpi	r24, 0x80	; 128
    27e8:	09 f4       	brne	.+2      	; 0x27ec <GLCD_VidDrawPWM+0x1c2>
    27ea:	5c c0       	rjmp	.+184    	; 0x28a4 <GLCD_VidDrawPWM+0x27a>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    27f2:	80 91 86 03 	lds	r24, 0x0386
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	80 93 86 03 	sts	0x0386, r24
		}

		for(u8 i=0;i<Toff;i++)   //For Low Level Period (Toff)
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	24 c0       	rjmp	.+72     	; 0x2848 <GLCD_VidDrawPWM+0x21e>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2800:	80 91 86 03 	lds	r24, 0x0386
    2804:	80 34       	cpi	r24, 0x40	; 64
    2806:	89 f4       	brne	.+34     	; 0x282a <GLCD_VidDrawPWM+0x200>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	63 e0       	ldi	r22, 0x03	; 3
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	64 e0       	ldi	r22, 0x04	; 4
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    281c:	88 85       	ldd	r24, Y+8	; 0x08
    281e:	88 54       	subi	r24, 0x48	; 72
    2820:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2824:	80 e4       	ldi	r24, 0x40	; 64
    2826:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    282a:	80 91 86 03 	lds	r24, 0x0386
    282e:	80 38       	cpi	r24, 0x80	; 128
    2830:	c9 f1       	breq	.+114    	; 0x28a4 <GLCD_VidDrawPWM+0x27a>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0x80);   //Send 0x80 to Display Low Level
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2838:	80 91 86 03 	lds	r24, 0x0386
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	80 93 86 03 	sts	0x0386, r24
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
			Y++;                      //Increment The Column Tracker Variable
		}

		for(u8 i=0;i<Toff;i++)   //For Low Level Period (Toff)
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	8f 5f       	subi	r24, 0xFF	; 255
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	99 81       	ldd	r25, Y+1	; 0x01
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	98 17       	cp	r25, r24
    284e:	c0 f2       	brcs	.-80     	; 0x2800 <GLCD_VidDrawPWM+0x1d6>
			}
			GLCD_VidSendData(0x80);   //Send 0x80 to Display Low Level
			Y++;                      //Increment The Column Tracker Variable
		}

		if((Toff != 0) && (Ton != 0))   //If the Wave is not fully High/Low Level
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	88 23       	and	r24, r24
    2854:	09 f4       	brne	.+2      	; 0x2858 <GLCD_VidDrawPWM+0x22e>
    2856:	7f cf       	rjmp	.-258    	; 0x2756 <GLCD_VidDrawPWM+0x12c>
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	88 23       	and	r24, r24
    285c:	09 f4       	brne	.+2      	; 0x2860 <GLCD_VidDrawPWM+0x236>
    285e:	7b cf       	rjmp	.-266    	; 0x2756 <GLCD_VidDrawPWM+0x12c>
		{
			if(Y == 64)   //Check if Column address reaches 64 (Start of Right Side of GLCD)
    2860:	80 91 86 03 	lds	r24, 0x0386
    2864:	80 34       	cpi	r24, 0x40	; 64
    2866:	89 f4       	brne	.+34     	; 0x288a <GLCD_VidDrawPWM+0x260>
			{
				//Select CS2 (Right Side)
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_LOW);
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	63 e0       	ldi	r22, 0x03	; 3
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				DIO_VidSetPinValue(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_HIGH);
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	64 e0       	ldi	r22, 0x04	; 4
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_VidSetPinValue>
				GLCD_VidSendCommand(0xB8 + Copy_u8Page);   //Set Page
    287c:	88 85       	ldd	r24, Y+8	; 0x08
    287e:	88 54       	subi	r24, 0x48	; 72
    2880:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
				GLCD_VidSendCommand(0x40);                 //Set Column to address 0x40
    2884:	80 e4       	ldi	r24, 0x40	; 64
    2886:	0e 94 9f 0c 	call	0x193e	; 0x193e <GLCD_VidSendCommand>
			}
			if(Y == 128)   //Check if Column address reaches 128 (End of Right Side of GLCD)
    288a:	80 91 86 03 	lds	r24, 0x0386
    288e:	80 38       	cpi	r24, 0x80	; 128
    2890:	49 f0       	breq	.+18     	; 0x28a4 <GLCD_VidDrawPWM+0x27a>
			{
				return;   //Break From Function
			}
			GLCD_VidSendData(0xFF);   //Send 0xFF to Display Vertical Line (Represents Edge)
    2892:	8f ef       	ldi	r24, 0xFF	; 255
    2894:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GLCD_VidSendData>
			Y++;                      //Increment The Column Tracker Variable
    2898:	80 91 86 03 	lds	r24, 0x0386
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	80 93 86 03 	sts	0x0386, r24
    28a2:	59 cf       	rjmp	.-334    	; 0x2756 <GLCD_VidDrawPWM+0x12c>
		}
	}
}
    28a4:	60 96       	adiw	r28, 0x10	; 16
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	08 95       	ret

000028ba <TIMER0_VidInit>:
#include "TIMER_Interface.h"
#include "TIMER_Config.h"

//Timer0 Initialization
void TIMER0_VidInit(void)
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR0&=0xF8;
    28c2:	a3 e5       	ldi	r26, 0x53	; 83
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e3 e5       	ldi	r30, 0x53	; 83
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	88 7f       	andi	r24, 0xF8	; 248
    28ce:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SET_PRESCALER;
    28d0:	a3 e5       	ldi	r26, 0x53	; 83
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e3 e5       	ldi	r30, 0x53	; 83
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	82 60       	ori	r24, 0x02	; 2
    28dc:	8c 93       	st	X, r24
	/*Set Mode*/
#if TIMER0_SET_MODE == TIMER0_NORMAL_MODE   //Select Normal Mode
	CLR_BIT(TCCR0,6);
    28de:	a3 e5       	ldi	r26, 0x53	; 83
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e3 e5       	ldi	r30, 0x53	; 83
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8f 7b       	andi	r24, 0xBF	; 191
    28ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
    28ec:	a3 e5       	ldi	r26, 0x53	; 83
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e3 e5       	ldi	r30, 0x53	; 83
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	87 7f       	andi	r24, 0xF7	; 247
    28f8:	8c 93       	st	X, r24
	/*Enable Overflow Interrupt*/
	SET_BIT(TIMSK,0);
    28fa:	a9 e5       	ldi	r26, 0x59	; 89
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e9 e5       	ldi	r30, 0x59	; 89
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	8c 93       	st	X, r24
#error "Timer0 OC0 Pin Option is not Valid"
#endif
#else
#error "Timer0 Mode Option is not Valid"
#endif
}
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <TIMER0_VidSetPreload>:
//Timer0 Set Preload
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	0f 92       	push	r0
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    291a:	e2 e5       	ldi	r30, 0x52	; 82
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	80 83       	st	Z, r24
}
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <TIMER0_VidSetCTCValue>:
//Timer0 Set CTC Value
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTCValue - 1;
    2936:	ec e5       	ldi	r30, 0x5C	; 92
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	80 83       	st	Z, r24
}
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <CallBack_TIMER0_CTC>:
//Global Variable for Timer0 CTC
void(*ptr_Global_Timer0_CTC)(void);

//Call Back Function for Timer0 CTC ISR
void CallBack_TIMER0_CTC(void(*ptr)(void))
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <CallBack_TIMER0_CTC+0x6>
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	9a 83       	std	Y+2, r25	; 0x02
    2954:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer0_CTC = ptr;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	90 93 99 03 	sts	0x0399, r25
    295e:	80 93 98 03 	sts	0x0398, r24
}
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <__vector_10>:

//ISR For Timer0 CTC
void __vector_10(void)       __attribute__((signal));
void __vector_10(void)
{
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	11 24       	eor	r1, r1
    2976:	2f 93       	push	r18
    2978:	3f 93       	push	r19
    297a:	4f 93       	push	r20
    297c:	5f 93       	push	r21
    297e:	6f 93       	push	r22
    2980:	7f 93       	push	r23
    2982:	8f 93       	push	r24
    2984:	9f 93       	push	r25
    2986:	af 93       	push	r26
    2988:	bf 93       	push	r27
    298a:	ef 93       	push	r30
    298c:	ff 93       	push	r31
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer0_CTC();
    2996:	e0 91 98 03 	lds	r30, 0x0398
    299a:	f0 91 99 03 	lds	r31, 0x0399
    299e:	09 95       	icall
}
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	ff 91       	pop	r31
    29a6:	ef 91       	pop	r30
    29a8:	bf 91       	pop	r27
    29aa:	af 91       	pop	r26
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	7f 91       	pop	r23
    29b2:	6f 91       	pop	r22
    29b4:	5f 91       	pop	r21
    29b6:	4f 91       	pop	r20
    29b8:	3f 91       	pop	r19
    29ba:	2f 91       	pop	r18
    29bc:	0f 90       	pop	r0
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	0f 90       	pop	r0
    29c2:	1f 90       	pop	r1
    29c4:	18 95       	reti

000029c6 <CallBack_TIMER0_OVER_FLOW>:
//Global Variable for Timer0 Over Flow
void(*ptr_Global_Timer0_Over_Flow)(void);

//Call Back Function for Timer0 Over Flow ISR
void CallBack_TIMER0_OVER_FLOW(void(*ptr)(void))
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <CallBack_TIMER0_OVER_FLOW+0x6>
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer0_Over_Flow = ptr;
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	90 93 8f 03 	sts	0x038F, r25
    29dc:	80 93 8e 03 	sts	0x038E, r24
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <__vector_11>:

//ISR For Timer0 Over Flow
void __vector_11(void)       __attribute__((signal));
void __vector_11(void)
{
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer0_Over_Flow();
    2a14:	e0 91 8e 03 	lds	r30, 0x038E
    2a18:	f0 91 8f 03 	lds	r31, 0x038F
    2a1c:	09 95       	icall
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <TIMER1_VidInit>:


//Timer1 Initialization
void TIMER1_VidInit(void)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR1B&=0xF8;
    2a4c:	ae e4       	ldi	r26, 0x4E	; 78
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	ee e4       	ldi	r30, 0x4E	; 78
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	88 7f       	andi	r24, 0xF8	; 248
    2a58:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SET_PRESCALER;
    2a5a:	ae e4       	ldi	r26, 0x4E	; 78
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	ee e4       	ldi	r30, 0x4E	; 78
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	81 60       	ori	r24, 0x01	; 1
    2a66:	8c 93       	st	X, r24
	/*Set Mode*/
#if TIMER1_SET_MODE == TIMER1_NORMAL_MODE   //Select Normal Mode
	CLR_BIT(TCCR1A,0);
    2a68:	af e4       	ldi	r26, 0x4F	; 79
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	ef e4       	ldi	r30, 0x4F	; 79
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8e 7f       	andi	r24, 0xFE	; 254
    2a74:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2a76:	af e4       	ldi	r26, 0x4F	; 79
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	ef e4       	ldi	r30, 0x4F	; 79
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	8d 7f       	andi	r24, 0xFD	; 253
    2a82:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    2a84:	ae e4       	ldi	r26, 0x4E	; 78
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	ee e4       	ldi	r30, 0x4E	; 78
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	87 7f       	andi	r24, 0xF7	; 247
    2a90:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    2a92:	ae e4       	ldi	r26, 0x4E	; 78
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	ee e4       	ldi	r30, 0x4E	; 78
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	8f 7e       	andi	r24, 0xEF	; 239
    2a9e:	8c 93       	st	X, r24
	/*Enable Overflow Interrupt*/
	SET_BIT(TIMSK,2);
    2aa0:	a9 e5       	ldi	r26, 0x59	; 89
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e9 e5       	ldi	r30, 0x59	; 89
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	84 60       	ori	r24, 0x04	; 4
    2aac:	8c 93       	st	X, r24
#else
#error "Timer1 Mode Option is not Valid"
#endif


}
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <TIMER1_VidSetPreload>:
//Timer1 Set Preload
void TIMER1_VidSetPreload(u16 Copy_u16Preload)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <TIMER1_VidSetPreload+0x6>
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = Copy_u16Preload;
    2ac2:	ec e4       	ldi	r30, 0x4C	; 76
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	80 83       	st	Z, r24
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <TIMER1_VidSetCTCValue>:
//Timer1 Set CTC Value
void TIMER1_VidSetCTCValue(u16 Copy_u16CTCValue)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <TIMER1_VidSetCTCValue+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
#if TIMER1_CHANNEL == TIMER1_CHANNEL_A
	OCR1A = Copy_u16CTCValue - 1;
    2ae6:	ea e4       	ldi	r30, 0x4A	; 74
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
#elif TIMER1_CHANNEL == TIMER1_CHANNEL_B
	OCR1B = Copy_u16CTCValue - 1;
#else
#error "Timer1 Channel Option is not Valid"
#endif
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <TIMER1_VidSetTopValue>:
//Timer1 Set Top Value
void TIMER1_VidSetTopValue(u16 Copy_u16TopValue)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <TIMER1_VidSetTopValue+0x6>
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16TopValue;
#else
#error "Timer1 Top Option is not Valid"
#endif

}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <TIMER1_VidICUEnable>:
//Timer1 Select Sense Edge & Enable ICU Interrupt
void TIMER1_VidICUEnable(u8 Copy_u8Edge)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	0f 92       	push	r0
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
	/*Select Sense Control*/
	if(Copy_u8Edge == TIMER1_ICU_RAISING_EDGE)
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	88 23       	and	r24, r24
    2b26:	41 f4       	brne	.+16     	; 0x2b38 <TIMER1_VidICUEnable+0x22>
	{
		SET_BIT(TCCR1B,6);
    2b28:	ae e4       	ldi	r26, 0x4E	; 78
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ee e4       	ldi	r30, 0x4E	; 78
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 64       	ori	r24, 0x40	; 64
    2b34:	8c 93       	st	X, r24
    2b36:	0a c0       	rjmp	.+20     	; 0x2b4c <TIMER1_VidICUEnable+0x36>
	}
	else if(Copy_u8Edge == TIMER1_ICU_FALLING_EDGE)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	39 f4       	brne	.+14     	; 0x2b4c <TIMER1_VidICUEnable+0x36>
	{
		CLR_BIT(TCCR1B,6);
    2b3e:	ae e4       	ldi	r26, 0x4E	; 78
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ee e4       	ldi	r30, 0x4E	; 78
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	8f 7b       	andi	r24, 0xBF	; 191
    2b4a:	8c 93       	st	X, r24
	}
	/*ICU Interrupt Enable*/
	SET_BIT(TIMSK,5);
    2b4c:	a9 e5       	ldi	r26, 0x59	; 89
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e9 e5       	ldi	r30, 0x59	; 89
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	80 62       	ori	r24, 0x20	; 32
    2b58:	8c 93       	st	X, r24
}
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <TIMER1_u16_READ_COUNT>:

//Function For Returning Register ICR1
u16 TIMER1_u16_READ_COUNT(void)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2b6a:	e6 e4       	ldi	r30, 0x46	; 70
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <CallBack_TIMER1_ICU>:
//Global Variable for Timer1 ICU
void(*ptr_Global_Timer1_ICU)(void);

//Call Back Function for Timer1 ICU ISR
void CallBack_TIMER1_ICU(void(*ptr)(void))
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <CallBack_TIMER1_ICU+0x6>
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer1_ICU = ptr;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	90 93 93 03 	sts	0x0393, r25
    2b8e:	80 93 92 03 	sts	0x0392, r24
}
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <__vector_6>:

//ISR For Timer1 ICU
void __vector_6(void)       __attribute__((signal));
void __vector_6(void)
{
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	2f 93       	push	r18
    2ba8:	3f 93       	push	r19
    2baa:	4f 93       	push	r20
    2bac:	5f 93       	push	r21
    2bae:	6f 93       	push	r22
    2bb0:	7f 93       	push	r23
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	ef 93       	push	r30
    2bbc:	ff 93       	push	r31
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer1_ICU();
    2bc6:	e0 91 92 03 	lds	r30, 0x0392
    2bca:	f0 91 93 03 	lds	r31, 0x0393
    2bce:	09 95       	icall
}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	ff 91       	pop	r31
    2bd6:	ef 91       	pop	r30
    2bd8:	bf 91       	pop	r27
    2bda:	af 91       	pop	r26
    2bdc:	9f 91       	pop	r25
    2bde:	8f 91       	pop	r24
    2be0:	7f 91       	pop	r23
    2be2:	6f 91       	pop	r22
    2be4:	5f 91       	pop	r21
    2be6:	4f 91       	pop	r20
    2be8:	3f 91       	pop	r19
    2bea:	2f 91       	pop	r18
    2bec:	0f 90       	pop	r0
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	0f 90       	pop	r0
    2bf2:	1f 90       	pop	r1
    2bf4:	18 95       	reti

00002bf6 <CallBack_TIMER1_CTC_Channel_A>:
//Global Variable for Timer1 CTC Channel A
void(*ptr_Global_Timer1_CTC_Channel_A)(void);

//Call Back Function for Timer1 CTC Channel A ISR
void CallBack_TIMER1_CTC_Channel_A(void(*ptr)(void))
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <CallBack_TIMER1_CTC_Channel_A+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer1_CTC_Channel_A = ptr;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	90 93 8d 03 	sts	0x038D, r25
    2c0c:	80 93 8c 03 	sts	0x038C, r24
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <__vector_7>:

//ISR For Timer1 CTC Channel A
void __vector_7(void)       __attribute__((signal));
void __vector_7(void)
{
    2c1a:	1f 92       	push	r1
    2c1c:	0f 92       	push	r0
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	2f 93       	push	r18
    2c26:	3f 93       	push	r19
    2c28:	4f 93       	push	r20
    2c2a:	5f 93       	push	r21
    2c2c:	6f 93       	push	r22
    2c2e:	7f 93       	push	r23
    2c30:	8f 93       	push	r24
    2c32:	9f 93       	push	r25
    2c34:	af 93       	push	r26
    2c36:	bf 93       	push	r27
    2c38:	ef 93       	push	r30
    2c3a:	ff 93       	push	r31
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer1_CTC_Channel_A();
    2c44:	e0 91 8c 03 	lds	r30, 0x038C
    2c48:	f0 91 8d 03 	lds	r31, 0x038D
    2c4c:	09 95       	icall
}
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	ff 91       	pop	r31
    2c54:	ef 91       	pop	r30
    2c56:	bf 91       	pop	r27
    2c58:	af 91       	pop	r26
    2c5a:	9f 91       	pop	r25
    2c5c:	8f 91       	pop	r24
    2c5e:	7f 91       	pop	r23
    2c60:	6f 91       	pop	r22
    2c62:	5f 91       	pop	r21
    2c64:	4f 91       	pop	r20
    2c66:	3f 91       	pop	r19
    2c68:	2f 91       	pop	r18
    2c6a:	0f 90       	pop	r0
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	0f 90       	pop	r0
    2c70:	1f 90       	pop	r1
    2c72:	18 95       	reti

00002c74 <CallBack_TIMER1_CTC_Channel_B>:
//Global Variable for Timer1 CTC Channel B
void(*ptr_Global_Timer1_CTC_Channel_B)(void);

//Call Back Function for Timer1 CTC Channel B ISR
void CallBack_TIMER1_CTC_Channel_B(void(*ptr)(void))
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <CallBack_TIMER1_CTC_Channel_B+0x6>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer1_CTC_Channel_B = ptr;
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	90 93 95 03 	sts	0x0395, r25
    2c8a:	80 93 94 03 	sts	0x0394, r24
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <__vector_8>:

//ISR For Timer1 CTC Channel B
void __vector_8(void)       __attribute__((signal));
void __vector_8(void)
{
    2c98:	1f 92       	push	r1
    2c9a:	0f 92       	push	r0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	0f 92       	push	r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	2f 93       	push	r18
    2ca4:	3f 93       	push	r19
    2ca6:	4f 93       	push	r20
    2ca8:	5f 93       	push	r21
    2caa:	6f 93       	push	r22
    2cac:	7f 93       	push	r23
    2cae:	8f 93       	push	r24
    2cb0:	9f 93       	push	r25
    2cb2:	af 93       	push	r26
    2cb4:	bf 93       	push	r27
    2cb6:	ef 93       	push	r30
    2cb8:	ff 93       	push	r31
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer1_CTC_Channel_B();
    2cc2:	e0 91 94 03 	lds	r30, 0x0394
    2cc6:	f0 91 95 03 	lds	r31, 0x0395
    2cca:	09 95       	icall
}
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <CallBack_TIMER1_OVER_FLOW>:
//Global Variable for Timer1 OverFlow
void(*ptr_Global_Timer1_Over_Flow)(void);

//Call Back Function for Timer1 OverFlow ISR
void CallBack_TIMER1_OVER_FLOW(void(*ptr)(void))
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <CallBack_TIMER1_OVER_FLOW+0x6>
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer1_Over_Flow = ptr;
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	90 93 97 03 	sts	0x0397, r25
    2d08:	80 93 96 03 	sts	0x0396, r24
}
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <__vector_9>:

//ISR For Timer1 OverFlow
void __vector_9(void)       __attribute__((signal));
void __vector_9(void)
{
    2d16:	1f 92       	push	r1
    2d18:	0f 92       	push	r0
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	0f 92       	push	r0
    2d1e:	11 24       	eor	r1, r1
    2d20:	2f 93       	push	r18
    2d22:	3f 93       	push	r19
    2d24:	4f 93       	push	r20
    2d26:	5f 93       	push	r21
    2d28:	6f 93       	push	r22
    2d2a:	7f 93       	push	r23
    2d2c:	8f 93       	push	r24
    2d2e:	9f 93       	push	r25
    2d30:	af 93       	push	r26
    2d32:	bf 93       	push	r27
    2d34:	ef 93       	push	r30
    2d36:	ff 93       	push	r31
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer1_Over_Flow();
    2d40:	e0 91 96 03 	lds	r30, 0x0396
    2d44:	f0 91 97 03 	lds	r31, 0x0397
    2d48:	09 95       	icall
}
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	ff 91       	pop	r31
    2d50:	ef 91       	pop	r30
    2d52:	bf 91       	pop	r27
    2d54:	af 91       	pop	r26
    2d56:	9f 91       	pop	r25
    2d58:	8f 91       	pop	r24
    2d5a:	7f 91       	pop	r23
    2d5c:	6f 91       	pop	r22
    2d5e:	5f 91       	pop	r21
    2d60:	4f 91       	pop	r20
    2d62:	3f 91       	pop	r19
    2d64:	2f 91       	pop	r18
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	0f 90       	pop	r0
    2d6c:	1f 90       	pop	r1
    2d6e:	18 95       	reti

00002d70 <TIMER2_VidInit>:


//Timer2 Initialization
void TIMER2_VidInit(void)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler*/
	TCCR2&=0xF8;
    2d78:	a5 e4       	ldi	r26, 0x45	; 69
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e5 e4       	ldi	r30, 0x45	; 69
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	88 7f       	andi	r24, 0xF8	; 248
    2d84:	8c 93       	st	X, r24
	TCCR2|=TIMER2_SET_PRESCALER;
    2d86:	a5 e4       	ldi	r26, 0x45	; 69
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e5 e4       	ldi	r30, 0x45	; 69
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	86 60       	ori	r24, 0x06	; 6
    2d92:	8c 93       	st	X, r24
#error "Timer2 OC2 Pin Option is not Valid"
#endif
	/*Enable CTC Interrupt*/
	SET_BIT(TIMSK,7);
#elif TIMER2_SET_MODE == TIMER2_FAST_PWM_MODE   //Select Fast PWM Mode
	SET_BIT(TCCR2,6);
    2d94:	a5 e4       	ldi	r26, 0x45	; 69
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e5 e4       	ldi	r30, 0x45	; 69
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	80 64       	ori	r24, 0x40	; 64
    2da0:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    2da2:	a5 e4       	ldi	r26, 0x45	; 69
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e5 e4       	ldi	r30, 0x45	; 69
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	88 60       	ori	r24, 0x08	; 8
    2dae:	8c 93       	st	X, r24
	//OC2 Pin Option
#if TIMER2_FAST_PWM_OC2_MODE == TIMER2_OC2_NON_INVERTING   //OC2 in Non Inverting Mode
	CLR_BIT(TCCR2,4);
    2db0:	a5 e4       	ldi	r26, 0x45	; 69
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e5 e4       	ldi	r30, 0x45	; 69
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	8f 7e       	andi	r24, 0xEF	; 239
    2dbc:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
    2dbe:	a5 e4       	ldi	r26, 0x45	; 69
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e5 e4       	ldi	r30, 0x45	; 69
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 62       	ori	r24, 0x20	; 32
    2dca:	8c 93       	st	X, r24
#error "Timer2 OC2 Pin Option is not Valid"
#endif
#else
#error "Timer2 Mode Option is not Valid"
#endif
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <TIMER2_VidSetPreload>:
//Timer2 Set Preload
void TIMER2_VidSetPreload(u8 Copy_u8Preload)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	0f 92       	push	r0
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload;
    2dde:	e4 e4       	ldi	r30, 0x44	; 68
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	80 83       	st	Z, r24
}
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <TIMER2_VidSetCTCValue>:
//Timer2 Set CTC Value
void TIMER2_VidSetCTCValue(u8 Copy_u8CTCValue)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	0f 92       	push	r0
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTCValue - 1;
    2dfa:	e3 e4       	ldi	r30, 0x43	; 67
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	81 50       	subi	r24, 0x01	; 1
    2e02:	80 83       	st	Z, r24
}
    2e04:	0f 90       	pop	r0
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <CallBack_TIMER2_CTC>:
//Global Variable for Timer2 CTC
void(*ptr_Global_Timer2_CTC)(void);

//Call Back Function for Timer2 CTC ISR
void CallBack_TIMER2_CTC(void(*ptr)(void))
{
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <CallBack_TIMER2_CTC+0x6>
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer2_CTC = ptr;
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1e:	90 93 8b 03 	sts	0x038B, r25
    2e22:	80 93 8a 03 	sts	0x038A, r24
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <__vector_4>:

//ISR For Timer2 CTC
void __vector_4(void)       __attribute__((signal));
void __vector_4(void)
{
    2e30:	1f 92       	push	r1
    2e32:	0f 92       	push	r0
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	0f 92       	push	r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	2f 93       	push	r18
    2e3c:	3f 93       	push	r19
    2e3e:	4f 93       	push	r20
    2e40:	5f 93       	push	r21
    2e42:	6f 93       	push	r22
    2e44:	7f 93       	push	r23
    2e46:	8f 93       	push	r24
    2e48:	9f 93       	push	r25
    2e4a:	af 93       	push	r26
    2e4c:	bf 93       	push	r27
    2e4e:	ef 93       	push	r30
    2e50:	ff 93       	push	r31
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer2_CTC();
    2e5a:	e0 91 8a 03 	lds	r30, 0x038A
    2e5e:	f0 91 8b 03 	lds	r31, 0x038B
    2e62:	09 95       	icall
}
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	ff 91       	pop	r31
    2e6a:	ef 91       	pop	r30
    2e6c:	bf 91       	pop	r27
    2e6e:	af 91       	pop	r26
    2e70:	9f 91       	pop	r25
    2e72:	8f 91       	pop	r24
    2e74:	7f 91       	pop	r23
    2e76:	6f 91       	pop	r22
    2e78:	5f 91       	pop	r21
    2e7a:	4f 91       	pop	r20
    2e7c:	3f 91       	pop	r19
    2e7e:	2f 91       	pop	r18
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	0f 90       	pop	r0
    2e86:	1f 90       	pop	r1
    2e88:	18 95       	reti

00002e8a <CallBack_TIMER2_OVER_FLOW>:
//Global Variable for Timer2 Over Flow
void(*ptr_Global_Timer2_Over_Flow)(void);

//Call Back Function for Timer2 Over Flow ISR
void CallBack_TIMER2_OVER_FLOW(void(*ptr)(void))
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <CallBack_TIMER2_OVER_FLOW+0x6>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	9a 83       	std	Y+2, r25	; 0x02
    2e96:	89 83       	std	Y+1, r24	; 0x01
	ptr_Global_Timer2_Over_Flow = ptr;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	90 93 91 03 	sts	0x0391, r25
    2ea0:	80 93 90 03 	sts	0x0390, r24
}
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <__vector_5>:

//ISR For Timer2 Over Flow
void __vector_5(void)       __attribute__((signal));
void __vector_5(void)
{
    2eae:	1f 92       	push	r1
    2eb0:	0f 92       	push	r0
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	0f 92       	push	r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	2f 93       	push	r18
    2eba:	3f 93       	push	r19
    2ebc:	4f 93       	push	r20
    2ebe:	5f 93       	push	r21
    2ec0:	6f 93       	push	r22
    2ec2:	7f 93       	push	r23
    2ec4:	8f 93       	push	r24
    2ec6:	9f 93       	push	r25
    2ec8:	af 93       	push	r26
    2eca:	bf 93       	push	r27
    2ecc:	ef 93       	push	r30
    2ece:	ff 93       	push	r31
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	ptr_Global_Timer2_Over_Flow();
    2ed8:	e0 91 90 03 	lds	r30, 0x0390
    2edc:	f0 91 91 03 	lds	r31, 0x0391
    2ee0:	09 95       	icall
}
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	ff 91       	pop	r31
    2ee8:	ef 91       	pop	r30
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	7f 91       	pop	r23
    2ef4:	6f 91       	pop	r22
    2ef6:	5f 91       	pop	r21
    2ef8:	4f 91       	pop	r20
    2efa:	3f 91       	pop	r19
    2efc:	2f 91       	pop	r18
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti

00002f08 <main>:

void Vid_Drawer(void);
void Vid_TIMER1_COUNT(void);

int main(void)
{
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	c1 57       	subi	r28, 0x71	; 113
    2f22:	d0 40       	sbci	r29, 0x00	; 0
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
	u8 Frequency_ARR[] ="Frequency = ";
    2f2e:	8e 01       	movw	r16, r28
    2f30:	05 5e       	subi	r16, 0xE5	; 229
    2f32:	1f 4f       	sbci	r17, 0xFF	; 255
    2f34:	6b 96       	adiw	r28, 0x1b	; 27
    2f36:	1f af       	std	Y+63, r17	; 0x3f
    2f38:	0e af       	std	Y+62, r16	; 0x3e
    2f3a:	6b 97       	sbiw	r28, 0x1b	; 27
    2f3c:	80 e6       	ldi	r24, 0x60	; 96
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	6d 96       	adiw	r28, 0x1d	; 29
    2f42:	9f af       	std	Y+63, r25	; 0x3f
    2f44:	8e af       	std	Y+62, r24	; 0x3e
    2f46:	6d 97       	sbiw	r28, 0x1d	; 29
    2f48:	9d e0       	ldi	r25, 0x0D	; 13
    2f4a:	6e 96       	adiw	r28, 0x1e	; 30
    2f4c:	9f af       	std	Y+63, r25	; 0x3f
    2f4e:	6e 97       	sbiw	r28, 0x1e	; 30
    2f50:	6d 96       	adiw	r28, 0x1d	; 29
    2f52:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f54:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f56:	6d 97       	sbiw	r28, 0x1d	; 29
    2f58:	00 80       	ld	r0, Z
    2f5a:	6d 96       	adiw	r28, 0x1d	; 29
    2f5c:	0e ad       	ldd	r16, Y+62	; 0x3e
    2f5e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f60:	6d 97       	sbiw	r28, 0x1d	; 29
    2f62:	0f 5f       	subi	r16, 0xFF	; 255
    2f64:	1f 4f       	sbci	r17, 0xFF	; 255
    2f66:	6d 96       	adiw	r28, 0x1d	; 29
    2f68:	1f af       	std	Y+63, r17	; 0x3f
    2f6a:	0e af       	std	Y+62, r16	; 0x3e
    2f6c:	6d 97       	sbiw	r28, 0x1d	; 29
    2f6e:	6b 96       	adiw	r28, 0x1b	; 27
    2f70:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f72:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f74:	6b 97       	sbiw	r28, 0x1b	; 27
    2f76:	00 82       	st	Z, r0
    2f78:	6b 96       	adiw	r28, 0x1b	; 27
    2f7a:	0e ad       	ldd	r16, Y+62	; 0x3e
    2f7c:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f7e:	6b 97       	sbiw	r28, 0x1b	; 27
    2f80:	0f 5f       	subi	r16, 0xFF	; 255
    2f82:	1f 4f       	sbci	r17, 0xFF	; 255
    2f84:	6b 96       	adiw	r28, 0x1b	; 27
    2f86:	1f af       	std	Y+63, r17	; 0x3f
    2f88:	0e af       	std	Y+62, r16	; 0x3e
    2f8a:	6b 97       	sbiw	r28, 0x1b	; 27
    2f8c:	6e 96       	adiw	r28, 0x1e	; 30
    2f8e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2f90:	6e 97       	sbiw	r28, 0x1e	; 30
    2f92:	11 50       	subi	r17, 0x01	; 1
    2f94:	6e 96       	adiw	r28, 0x1e	; 30
    2f96:	1f af       	std	Y+63, r17	; 0x3f
    2f98:	6e 97       	sbiw	r28, 0x1e	; 30
    2f9a:	6e 96       	adiw	r28, 0x1e	; 30
    2f9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f9e:	6e 97       	sbiw	r28, 0x1e	; 30
    2fa0:	88 23       	and	r24, r24
    2fa2:	b1 f6       	brne	.-84     	; 0x2f50 <main+0x48>
	u8 KHZ[] ="KHZ";
    2fa4:	80 91 6d 00 	lds	r24, 0x006D
    2fa8:	90 91 6e 00 	lds	r25, 0x006E
    2fac:	a0 91 6f 00 	lds	r26, 0x006F
    2fb0:	b0 91 70 00 	lds	r27, 0x0070
    2fb4:	88 a7       	std	Y+40, r24	; 0x28
    2fb6:	99 a7       	std	Y+41, r25	; 0x29
    2fb8:	aa a7       	std	Y+42, r26	; 0x2a
    2fba:	bb a7       	std	Y+43, r27	; 0x2b
	u8 DutyCycle_ARR[] = "Duty Cycle = ";
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	bc 96       	adiw	r30, 0x2c	; 44
    2fc0:	a0 96       	adiw	r28, 0x20	; 32
    2fc2:	ff af       	std	Y+63, r31	; 0x3f
    2fc4:	ee af       	std	Y+62, r30	; 0x3e
    2fc6:	a0 97       	sbiw	r28, 0x20	; 32
    2fc8:	01 e7       	ldi	r16, 0x71	; 113
    2fca:	10 e0       	ldi	r17, 0x00	; 0
    2fcc:	a2 96       	adiw	r28, 0x22	; 34
    2fce:	1f af       	std	Y+63, r17	; 0x3f
    2fd0:	0e af       	std	Y+62, r16	; 0x3e
    2fd2:	a2 97       	sbiw	r28, 0x22	; 34
    2fd4:	1e e0       	ldi	r17, 0x0E	; 14
    2fd6:	a3 96       	adiw	r28, 0x23	; 35
    2fd8:	1f af       	std	Y+63, r17	; 0x3f
    2fda:	a3 97       	sbiw	r28, 0x23	; 35
    2fdc:	a2 96       	adiw	r28, 0x22	; 34
    2fde:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fe0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fe2:	a2 97       	sbiw	r28, 0x22	; 34
    2fe4:	00 80       	ld	r0, Z
    2fe6:	a2 96       	adiw	r28, 0x22	; 34
    2fe8:	0e ad       	ldd	r16, Y+62	; 0x3e
    2fea:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fec:	a2 97       	sbiw	r28, 0x22	; 34
    2fee:	0f 5f       	subi	r16, 0xFF	; 255
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	a2 96       	adiw	r28, 0x22	; 34
    2ff4:	1f af       	std	Y+63, r17	; 0x3f
    2ff6:	0e af       	std	Y+62, r16	; 0x3e
    2ff8:	a2 97       	sbiw	r28, 0x22	; 34
    2ffa:	a0 96       	adiw	r28, 0x20	; 32
    2ffc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ffe:	ff ad       	ldd	r31, Y+63	; 0x3f
    3000:	a0 97       	sbiw	r28, 0x20	; 32
    3002:	00 82       	st	Z, r0
    3004:	a0 96       	adiw	r28, 0x20	; 32
    3006:	0e ad       	ldd	r16, Y+62	; 0x3e
    3008:	1f ad       	ldd	r17, Y+63	; 0x3f
    300a:	a0 97       	sbiw	r28, 0x20	; 32
    300c:	0f 5f       	subi	r16, 0xFF	; 255
    300e:	1f 4f       	sbci	r17, 0xFF	; 255
    3010:	a0 96       	adiw	r28, 0x20	; 32
    3012:	1f af       	std	Y+63, r17	; 0x3f
    3014:	0e af       	std	Y+62, r16	; 0x3e
    3016:	a0 97       	sbiw	r28, 0x20	; 32
    3018:	a3 96       	adiw	r28, 0x23	; 35
    301a:	1f ad       	ldd	r17, Y+63	; 0x3f
    301c:	a3 97       	sbiw	r28, 0x23	; 35
    301e:	11 50       	subi	r17, 0x01	; 1
    3020:	a3 96       	adiw	r28, 0x23	; 35
    3022:	1f af       	std	Y+63, r17	; 0x3f
    3024:	a3 97       	sbiw	r28, 0x23	; 35
    3026:	a3 96       	adiw	r28, 0x23	; 35
    3028:	8f ad       	ldd	r24, Y+63	; 0x3f
    302a:	a3 97       	sbiw	r28, 0x23	; 35
    302c:	88 23       	and	r24, r24
    302e:	b1 f6       	brne	.-84     	; 0x2fdc <main+0xd4>
	u8 Percent[] ="%";
    3030:	80 91 7f 00 	lds	r24, 0x007F
    3034:	90 91 80 00 	lds	r25, 0x0080
    3038:	9b af       	std	Y+59, r25	; 0x3b
    303a:	8a af       	std	Y+58, r24	; 0x3a
	u8 TimePerid_ARR[] = "Time Period = ";
    303c:	fe 01       	movw	r30, r28
    303e:	fc 96       	adiw	r30, 0x3c	; 60
    3040:	a5 96       	adiw	r28, 0x25	; 37
    3042:	ff af       	std	Y+63, r31	; 0x3f
    3044:	ee af       	std	Y+62, r30	; 0x3e
    3046:	a5 97       	sbiw	r28, 0x25	; 37
    3048:	01 e8       	ldi	r16, 0x81	; 129
    304a:	10 e0       	ldi	r17, 0x00	; 0
    304c:	a7 96       	adiw	r28, 0x27	; 39
    304e:	1f af       	std	Y+63, r17	; 0x3f
    3050:	0e af       	std	Y+62, r16	; 0x3e
    3052:	a7 97       	sbiw	r28, 0x27	; 39
    3054:	1f e0       	ldi	r17, 0x0F	; 15
    3056:	a8 96       	adiw	r28, 0x28	; 40
    3058:	1f af       	std	Y+63, r17	; 0x3f
    305a:	a8 97       	sbiw	r28, 0x28	; 40
    305c:	a7 96       	adiw	r28, 0x27	; 39
    305e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3060:	ff ad       	ldd	r31, Y+63	; 0x3f
    3062:	a7 97       	sbiw	r28, 0x27	; 39
    3064:	00 80       	ld	r0, Z
    3066:	a7 96       	adiw	r28, 0x27	; 39
    3068:	0e ad       	ldd	r16, Y+62	; 0x3e
    306a:	1f ad       	ldd	r17, Y+63	; 0x3f
    306c:	a7 97       	sbiw	r28, 0x27	; 39
    306e:	0f 5f       	subi	r16, 0xFF	; 255
    3070:	1f 4f       	sbci	r17, 0xFF	; 255
    3072:	a7 96       	adiw	r28, 0x27	; 39
    3074:	1f af       	std	Y+63, r17	; 0x3f
    3076:	0e af       	std	Y+62, r16	; 0x3e
    3078:	a7 97       	sbiw	r28, 0x27	; 39
    307a:	a5 96       	adiw	r28, 0x25	; 37
    307c:	ee ad       	ldd	r30, Y+62	; 0x3e
    307e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3080:	a5 97       	sbiw	r28, 0x25	; 37
    3082:	00 82       	st	Z, r0
    3084:	a5 96       	adiw	r28, 0x25	; 37
    3086:	0e ad       	ldd	r16, Y+62	; 0x3e
    3088:	1f ad       	ldd	r17, Y+63	; 0x3f
    308a:	a5 97       	sbiw	r28, 0x25	; 37
    308c:	0f 5f       	subi	r16, 0xFF	; 255
    308e:	1f 4f       	sbci	r17, 0xFF	; 255
    3090:	a5 96       	adiw	r28, 0x25	; 37
    3092:	1f af       	std	Y+63, r17	; 0x3f
    3094:	0e af       	std	Y+62, r16	; 0x3e
    3096:	a5 97       	sbiw	r28, 0x25	; 37
    3098:	a8 96       	adiw	r28, 0x28	; 40
    309a:	1f ad       	ldd	r17, Y+63	; 0x3f
    309c:	a8 97       	sbiw	r28, 0x28	; 40
    309e:	11 50       	subi	r17, 0x01	; 1
    30a0:	a8 96       	adiw	r28, 0x28	; 40
    30a2:	1f af       	std	Y+63, r17	; 0x3f
    30a4:	a8 97       	sbiw	r28, 0x28	; 40
    30a6:	a8 96       	adiw	r28, 0x28	; 40
    30a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    30aa:	a8 97       	sbiw	r28, 0x28	; 40
    30ac:	88 23       	and	r24, r24
    30ae:	b1 f6       	brne	.-84     	; 0x305c <main+0x154>
	u8 ms[] ="ms";
    30b0:	ce 01       	movw	r24, r28
    30b2:	85 5b       	subi	r24, 0xB5	; 181
    30b4:	9f 4f       	sbci	r25, 0xFF	; 255
    30b6:	aa 96       	adiw	r28, 0x2a	; 42
    30b8:	9f af       	std	Y+63, r25	; 0x3f
    30ba:	8e af       	std	Y+62, r24	; 0x3e
    30bc:	aa 97       	sbiw	r28, 0x2a	; 42
    30be:	e0 e9       	ldi	r30, 0x90	; 144
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	ac 96       	adiw	r28, 0x2c	; 44
    30c4:	ff af       	std	Y+63, r31	; 0x3f
    30c6:	ee af       	std	Y+62, r30	; 0x3e
    30c8:	ac 97       	sbiw	r28, 0x2c	; 44
    30ca:	f3 e0       	ldi	r31, 0x03	; 3
    30cc:	ad 96       	adiw	r28, 0x2d	; 45
    30ce:	ff af       	std	Y+63, r31	; 0x3f
    30d0:	ad 97       	sbiw	r28, 0x2d	; 45
    30d2:	ac 96       	adiw	r28, 0x2c	; 44
    30d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    30d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    30d8:	ac 97       	sbiw	r28, 0x2c	; 44
    30da:	00 80       	ld	r0, Z
    30dc:	ac 96       	adiw	r28, 0x2c	; 44
    30de:	0e ad       	ldd	r16, Y+62	; 0x3e
    30e0:	1f ad       	ldd	r17, Y+63	; 0x3f
    30e2:	ac 97       	sbiw	r28, 0x2c	; 44
    30e4:	0f 5f       	subi	r16, 0xFF	; 255
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	ac 96       	adiw	r28, 0x2c	; 44
    30ea:	1f af       	std	Y+63, r17	; 0x3f
    30ec:	0e af       	std	Y+62, r16	; 0x3e
    30ee:	ac 97       	sbiw	r28, 0x2c	; 44
    30f0:	aa 96       	adiw	r28, 0x2a	; 42
    30f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    30f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    30f6:	aa 97       	sbiw	r28, 0x2a	; 42
    30f8:	00 82       	st	Z, r0
    30fa:	aa 96       	adiw	r28, 0x2a	; 42
    30fc:	0e ad       	ldd	r16, Y+62	; 0x3e
    30fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    3100:	aa 97       	sbiw	r28, 0x2a	; 42
    3102:	0f 5f       	subi	r16, 0xFF	; 255
    3104:	1f 4f       	sbci	r17, 0xFF	; 255
    3106:	aa 96       	adiw	r28, 0x2a	; 42
    3108:	1f af       	std	Y+63, r17	; 0x3f
    310a:	0e af       	std	Y+62, r16	; 0x3e
    310c:	aa 97       	sbiw	r28, 0x2a	; 42
    310e:	ad 96       	adiw	r28, 0x2d	; 45
    3110:	1f ad       	ldd	r17, Y+63	; 0x3f
    3112:	ad 97       	sbiw	r28, 0x2d	; 45
    3114:	11 50       	subi	r17, 0x01	; 1
    3116:	ad 96       	adiw	r28, 0x2d	; 45
    3118:	1f af       	std	Y+63, r17	; 0x3f
    311a:	ad 97       	sbiw	r28, 0x2d	; 45
    311c:	ad 96       	adiw	r28, 0x2d	; 45
    311e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3120:	ad 97       	sbiw	r28, 0x2d	; 45
    3122:	88 23       	and	r24, r24
    3124:	b1 f6       	brne	.-84     	; 0x30d2 <main+0x1ca>
	u8 Welcome[] = "Welcome...";
    3126:	ce 01       	movw	r24, r28
    3128:	82 5b       	subi	r24, 0xB2	; 178
    312a:	9f 4f       	sbci	r25, 0xFF	; 255
    312c:	af 96       	adiw	r28, 0x2f	; 47
    312e:	9f af       	std	Y+63, r25	; 0x3f
    3130:	8e af       	std	Y+62, r24	; 0x3e
    3132:	af 97       	sbiw	r28, 0x2f	; 47
    3134:	e3 e9       	ldi	r30, 0x93	; 147
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	e1 96       	adiw	r28, 0x31	; 49
    313a:	ff af       	std	Y+63, r31	; 0x3f
    313c:	ee af       	std	Y+62, r30	; 0x3e
    313e:	e1 97       	sbiw	r28, 0x31	; 49
    3140:	fb e0       	ldi	r31, 0x0B	; 11
    3142:	e2 96       	adiw	r28, 0x32	; 50
    3144:	ff af       	std	Y+63, r31	; 0x3f
    3146:	e2 97       	sbiw	r28, 0x32	; 50
    3148:	e1 96       	adiw	r28, 0x31	; 49
    314a:	ee ad       	ldd	r30, Y+62	; 0x3e
    314c:	ff ad       	ldd	r31, Y+63	; 0x3f
    314e:	e1 97       	sbiw	r28, 0x31	; 49
    3150:	00 80       	ld	r0, Z
    3152:	e1 96       	adiw	r28, 0x31	; 49
    3154:	0e ad       	ldd	r16, Y+62	; 0x3e
    3156:	1f ad       	ldd	r17, Y+63	; 0x3f
    3158:	e1 97       	sbiw	r28, 0x31	; 49
    315a:	0f 5f       	subi	r16, 0xFF	; 255
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	e1 96       	adiw	r28, 0x31	; 49
    3160:	1f af       	std	Y+63, r17	; 0x3f
    3162:	0e af       	std	Y+62, r16	; 0x3e
    3164:	e1 97       	sbiw	r28, 0x31	; 49
    3166:	af 96       	adiw	r28, 0x2f	; 47
    3168:	ee ad       	ldd	r30, Y+62	; 0x3e
    316a:	ff ad       	ldd	r31, Y+63	; 0x3f
    316c:	af 97       	sbiw	r28, 0x2f	; 47
    316e:	00 82       	st	Z, r0
    3170:	af 96       	adiw	r28, 0x2f	; 47
    3172:	0e ad       	ldd	r16, Y+62	; 0x3e
    3174:	1f ad       	ldd	r17, Y+63	; 0x3f
    3176:	af 97       	sbiw	r28, 0x2f	; 47
    3178:	0f 5f       	subi	r16, 0xFF	; 255
    317a:	1f 4f       	sbci	r17, 0xFF	; 255
    317c:	af 96       	adiw	r28, 0x2f	; 47
    317e:	1f af       	std	Y+63, r17	; 0x3f
    3180:	0e af       	std	Y+62, r16	; 0x3e
    3182:	af 97       	sbiw	r28, 0x2f	; 47
    3184:	e2 96       	adiw	r28, 0x32	; 50
    3186:	1f ad       	ldd	r17, Y+63	; 0x3f
    3188:	e2 97       	sbiw	r28, 0x32	; 50
    318a:	11 50       	subi	r17, 0x01	; 1
    318c:	e2 96       	adiw	r28, 0x32	; 50
    318e:	1f af       	std	Y+63, r17	; 0x3f
    3190:	e2 97       	sbiw	r28, 0x32	; 50
    3192:	e2 96       	adiw	r28, 0x32	; 50
    3194:	8f ad       	ldd	r24, Y+63	; 0x3f
    3196:	e2 97       	sbiw	r28, 0x32	; 50
    3198:	88 23       	and	r24, r24
    319a:	b1 f6       	brne	.-84     	; 0x3148 <main+0x240>

	/*Set OC2 as Output*/
	DIO_VidSetPinDirection(DIO_PORTD,7,PIN_OUTPUT);
    319c:	83 e0       	ldi	r24, 0x03	; 3
    319e:	67 e0       	ldi	r22, 0x07	; 7
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	/*Set ICP1 as Input*/
	DIO_VidSetPinDirection(DIO_PORTD,6,PIN_INPUT);
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	66 e0       	ldi	r22, 0x06	; 6
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>

	/*Set Data Pins Direction*/
	DIO_VidSetPortDirection(GLCD_DATA_PORT,PORT_OUTPUT);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	6f ef       	ldi	r22, 0xFF	; 255
    31b4:	0e 94 03 0a 	call	0x1406	; 0x1406 <DIO_VidSetPortDirection>
	/*Set Control Pins Direction*/
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_RS_PIN,PIN_OUTPUT);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_RW_PIN,PIN_OUTPUT);
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_E_PIN,PIN_OUTPUT);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_C1_PIN,PIN_OUTPUT);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	63 e0       	ldi	r22, 0x03	; 3
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_C2_PIN,PIN_OUTPUT);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	64 e0       	ldi	r22, 0x04	; 4
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(GLCD_CONTROL_PORT,GLCD_RST_PIN,PIN_OUTPUT);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	65 e0       	ldi	r22, 0x05	; 5
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_VidSetPinDirection>

	//GLCD Initialization
	GLCD_VidInit();
    31f4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GLCD_VidInit>
	//Clear GLCD
	GLCD_VidClear();
    31f8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <GLCD_VidClear>

	/*ICU Select Raising Edge & Enable Interrupt*/
	TIMER1_VidICUEnable(TIMER1_ICU_RAISING_EDGE);
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TIMER1_VidICUEnable>

	/*Timer1 Initialization Normal Mode - No Prescaler*/
	TIMER1_VidInit();
    3202:	0e 94 22 15 	call	0x2a44	; 0x2a44 <TIMER1_VidInit>
    //Timer1 Call Back Function for ICU
	CallBack_TIMER1_ICU(Vid_Drawer);
    3206:	8d e8       	ldi	r24, 0x8D	; 141
    3208:	9a e1       	ldi	r25, 0x1A	; 26
    320a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <CallBack_TIMER1_ICU>
	//Timer1 Call Back Function for Over Flow
	CallBack_TIMER1_OVER_FLOW(Vid_TIMER1_COUNT);
    320e:	8f ef       	ldi	r24, 0xFF	; 255
    3210:	9a e1       	ldi	r25, 0x1A	; 26
    3212:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <CallBack_TIMER1_OVER_FLOW>

	/*Timer2 CTC Value*/
	TIMER2_VidSetCTCValue(150);
    3216:	86 e9       	ldi	r24, 0x96	; 150
    3218:	0e 94 f7 16 	call	0x2dee	; 0x2dee <TIMER2_VidSetCTCValue>
	/*Timer2 Initialization Fast PWM Mode Non Inverting - Prescaler 256*/
	TIMER2_VidInit();
    321c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <TIMER2_VidInit>

	/*GLobal Interrupt Enable*/
	GIE_VidEnable();
    3220:	0e 94 83 0c 	call	0x1906	; 0x1906 <GIE_VidEnable>
	f32 Frequency;
	f32 DutyCycle;
	f32 TimePeriod;

	//Select Position
	GLCD_VidSetPosition(0,0);
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GLCD_VidSetPosition>
	GLCD_VidSendString(Welcome);
    322c:	ce 01       	movw	r24, r28
    322e:	82 5b       	subi	r24, 0xB2	; 178
    3230:	9f 4f       	sbci	r25, 0xFF	; 255
    3232:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	aa e7       	ldi	r26, 0x7A	; 122
    323c:	b4 e4       	ldi	r27, 0x44	; 68
    323e:	8b 87       	std	Y+11, r24	; 0x0b
    3240:	9c 87       	std	Y+12, r25	; 0x0c
    3242:	ad 87       	std	Y+13, r26	; 0x0d
    3244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3246:	6b 85       	ldd	r22, Y+11	; 0x0b
    3248:	7c 85       	ldd	r23, Y+12	; 0x0c
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a e7       	ldi	r20, 0x7A	; 122
    3254:	55 e4       	ldi	r21, 0x45	; 69
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	8f 83       	std	Y+7, r24	; 0x07
    3260:	98 87       	std	Y+8, r25	; 0x08
    3262:	a9 87       	std	Y+9, r26	; 0x09
    3264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3266:	6f 81       	ldd	r22, Y+7	; 0x07
    3268:	78 85       	ldd	r23, Y+8	; 0x08
    326a:	89 85       	ldd	r24, Y+9	; 0x09
    326c:	9a 85       	ldd	r25, Y+10	; 0x0a
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	2c f4       	brge	.+10     	; 0x3288 <main+0x380>
		__ticks = 1;
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	3f c0       	rjmp	.+126    	; 0x3306 <main+0x3fe>
	else if (__tmp > 65535)
    3288:	6f 81       	ldd	r22, Y+7	; 0x07
    328a:	78 85       	ldd	r23, Y+8	; 0x08
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	3f ef       	ldi	r19, 0xFF	; 255
    3294:	4f e7       	ldi	r20, 0x7F	; 127
    3296:	57 e4       	ldi	r21, 0x47	; 71
    3298:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    329c:	18 16       	cp	r1, r24
    329e:	4c f5       	brge	.+82     	; 0x32f2 <main+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <main+0x3e0>
    32ca:	80 e9       	ldi	r24, 0x90	; 144
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	9c 83       	std	Y+4, r25	; 0x04
    32d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <main+0x3ce>
    32da:	9c 83       	std	Y+4, r25	; 0x04
    32dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	69 f7       	brne	.-38     	; 0x32ca <main+0x3c2>
    32f0:	14 c0       	rjmp	.+40     	; 0x331a <main+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f2:	6f 81       	ldd	r22, Y+7	; 0x07
    32f4:	78 85       	ldd	r23, Y+8	; 0x08
    32f6:	89 85       	ldd	r24, Y+9	; 0x09
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <main+0x40a>
    3316:	9a 83       	std	Y+2, r25	; 0x02
    3318:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	//Clear GLCD
	GLCD_VidClear();
    331a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <GLCD_VidClear>

	while(1)
	{
		if(flag == 3)
    331e:	80 91 89 03 	lds	r24, 0x0389
    3322:	83 30       	cpi	r24, 0x03	; 3
    3324:	e1 f7       	brne	.-8      	; 0x331e <main+0x416>
		{
			Frequency = (1000/(((T3*1.0)/16)-((T1*1.0)/16))); //Calculate Frequency in KHz
    3326:	80 91 9e 03 	lds	r24, 0x039E
    332a:	90 91 9f 03 	lds	r25, 0x039F
    332e:	a0 91 a0 03 	lds	r26, 0x03A0
    3332:	b0 91 a1 03 	lds	r27, 0x03A1
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	7c 01       	movw	r14, r24
    3358:	8d 01       	movw	r16, r26
    335a:	80 91 a2 03 	lds	r24, 0x03A2
    335e:	90 91 a3 03 	lds	r25, 0x03A3
    3362:	a0 91 a4 03 	lds	r26, 0x03A4
    3366:	b0 91 a5 03 	lds	r27, 0x03A5
    336a:	bc 01       	movw	r22, r24
    336c:	cd 01       	movw	r24, r26
    336e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e8       	ldi	r20, 0x80	; 128
    3380:	51 ec       	ldi	r21, 0xC1	; 193
    3382:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9c 01       	movw	r18, r24
    338c:	ad 01       	movw	r20, r26
    338e:	c8 01       	movw	r24, r16
    3390:	b7 01       	movw	r22, r14
    3392:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9c 01       	movw	r18, r24
    339c:	ad 01       	movw	r20, r26
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	8a e7       	ldi	r24, 0x7A	; 122
    33a4:	94 e4       	ldi	r25, 0x44	; 68
    33a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 8b       	std	Y+23, r24	; 0x17
    33b0:	98 8f       	std	Y+24, r25	; 0x18
    33b2:	a9 8f       	std	Y+25, r26	; 0x19
    33b4:	ba 8f       	std	Y+26, r27	; 0x1a
			DutyCycle = (((T2-T1)*100.0)/(T3-T1));          //Calculate Duty Cycle
    33b6:	20 91 9a 03 	lds	r18, 0x039A
    33ba:	30 91 9b 03 	lds	r19, 0x039B
    33be:	40 91 9c 03 	lds	r20, 0x039C
    33c2:	50 91 9d 03 	lds	r21, 0x039D
    33c6:	80 91 a2 03 	lds	r24, 0x03A2
    33ca:	90 91 a3 03 	lds	r25, 0x03A3
    33ce:	a0 91 a4 03 	lds	r26, 0x03A4
    33d2:	b0 91 a5 03 	lds	r27, 0x03A5
    33d6:	59 01       	movw	r10, r18
    33d8:	6a 01       	movw	r12, r20
    33da:	a8 1a       	sub	r10, r24
    33dc:	b9 0a       	sbc	r11, r25
    33de:	ca 0a       	sbc	r12, r26
    33e0:	db 0a       	sbc	r13, r27
    33e2:	d6 01       	movw	r26, r12
    33e4:	c5 01       	movw	r24, r10
    33e6:	bc 01       	movw	r22, r24
    33e8:	cd 01       	movw	r24, r26
    33ea:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	48 ec       	ldi	r20, 0xC8	; 200
    33fc:	52 e4       	ldi	r21, 0x42	; 66
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	7c 01       	movw	r14, r24
    3408:	8d 01       	movw	r16, r26
    340a:	20 91 9e 03 	lds	r18, 0x039E
    340e:	30 91 9f 03 	lds	r19, 0x039F
    3412:	40 91 a0 03 	lds	r20, 0x03A0
    3416:	50 91 a1 03 	lds	r21, 0x03A1
    341a:	80 91 a2 03 	lds	r24, 0x03A2
    341e:	90 91 a3 03 	lds	r25, 0x03A3
    3422:	a0 91 a4 03 	lds	r26, 0x03A4
    3426:	b0 91 a5 03 	lds	r27, 0x03A5
    342a:	59 01       	movw	r10, r18
    342c:	6a 01       	movw	r12, r20
    342e:	a8 1a       	sub	r10, r24
    3430:	b9 0a       	sbc	r11, r25
    3432:	ca 0a       	sbc	r12, r26
    3434:	db 0a       	sbc	r13, r27
    3436:	d6 01       	movw	r26, r12
    3438:	c5 01       	movw	r24, r10
    343a:	bc 01       	movw	r22, r24
    343c:	cd 01       	movw	r24, r26
    343e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3442:	9b 01       	movw	r18, r22
    3444:	ac 01       	movw	r20, r24
    3446:	c8 01       	movw	r24, r16
    3448:	b7 01       	movw	r22, r14
    344a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8b 8b       	std	Y+19, r24	; 0x13
    3454:	9c 8b       	std	Y+20, r25	; 0x14
    3456:	ad 8b       	std	Y+21, r26	; 0x15
    3458:	be 8b       	std	Y+22, r27	; 0x16
			TimePeriod = (1/Frequency);
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	80 e8       	ldi	r24, 0x80	; 128
    3460:	9f e3       	ldi	r25, 0x3F	; 63
    3462:	2f 89       	ldd	r18, Y+23	; 0x17
    3464:	38 8d       	ldd	r19, Y+24	; 0x18
    3466:	49 8d       	ldd	r20, Y+25	; 0x19
    3468:	5a 8d       	ldd	r21, Y+26	; 0x1a
    346a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	8f 87       	std	Y+15, r24	; 0x0f
    3474:	98 8b       	std	Y+16, r25	; 0x10
    3476:	a9 8b       	std	Y+17, r26	; 0x11
    3478:	ba 8b       	std	Y+18, r27	; 0x12
			GLCD_VidSetPosition(0,0);                       //Select Page 0 Column 0
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GLCD_VidSetPosition>
			GLCD_VidSendString(Frequency_ARR);
    3482:	ce 01       	movw	r24, r28
    3484:	4b 96       	adiw	r24, 0x1b	; 27
    3486:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
			GLCD_VidSendNumber(Frequency);                  //Display Frequency
    348a:	8f 89       	ldd	r24, Y+23	; 0x17
    348c:	98 8d       	ldd	r25, Y+24	; 0x18
    348e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3490:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GLCD_VidSendNumber>
			GLCD_VidSendString(KHZ);
    349a:	ce 01       	movw	r24, r28
    349c:	88 96       	adiw	r24, 0x28	; 40
    349e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
			GLCD_VidSetPosition(2,0);                       //Select Page 1 Column 0
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GLCD_VidSetPosition>
			GLCD_VidSendString(DutyCycle_ARR);
    34aa:	ce 01       	movw	r24, r28
    34ac:	8c 96       	adiw	r24, 0x2c	; 44
    34ae:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
			GLCD_VidSendNumber(DutyCycle);                  //Display Duty Cycle
    34b2:	8b 89       	ldd	r24, Y+19	; 0x13
    34b4:	9c 89       	ldd	r25, Y+20	; 0x14
    34b6:	ad 89       	ldd	r26, Y+21	; 0x15
    34b8:	be 89       	ldd	r27, Y+22	; 0x16
    34ba:	bc 01       	movw	r22, r24
    34bc:	cd 01       	movw	r24, r26
    34be:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GLCD_VidSendNumber>
			GLCD_VidSendString(Percent);
    34c2:	ce 01       	movw	r24, r28
    34c4:	ca 96       	adiw	r24, 0x3a	; 58
    34c6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
			GLCD_VidSetPosition(4,0);                       //Select Page 2 Column 0
    34ca:	84 e0       	ldi	r24, 0x04	; 4
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <GLCD_VidSetPosition>
			GLCD_VidSendString(TimePerid_ARR);
    34d2:	ce 01       	movw	r24, r28
    34d4:	cc 96       	adiw	r24, 0x3c	; 60
    34d6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>
			GLCD_VidSendNumber(TimePeriod);                 //Display Time Period in ms
    34da:	8f 85       	ldd	r24, Y+15	; 0x0f
    34dc:	98 89       	ldd	r25, Y+16	; 0x10
    34de:	a9 89       	ldd	r26, Y+17	; 0x11
    34e0:	ba 89       	ldd	r27, Y+18	; 0x12
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <GLCD_VidSendNumber>
			GLCD_VidSendString(ms);
    34ea:	ce 01       	movw	r24, r28
    34ec:	85 5b       	subi	r24, 0xB5	; 181
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <GLCD_VidSendString>

			//Draw PWM
			GLCD_VidDrawPWM(6,Frequency,DutyCycle);
    34f4:	2f 89       	ldd	r18, Y+23	; 0x17
    34f6:	38 8d       	ldd	r19, Y+24	; 0x18
    34f8:	49 8d       	ldd	r20, Y+25	; 0x19
    34fa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    34fc:	eb 88       	ldd	r14, Y+19	; 0x13
    34fe:	fc 88       	ldd	r15, Y+20	; 0x14
    3500:	0d 89       	ldd	r16, Y+21	; 0x15
    3502:	1e 89       	ldd	r17, Y+22	; 0x16
    3504:	86 e0       	ldi	r24, 0x06	; 6
    3506:	ba 01       	movw	r22, r20
    3508:	a9 01       	movw	r20, r18
    350a:	98 01       	movw	r18, r16
    350c:	87 01       	movw	r16, r14
    350e:	0e 94 15 13 	call	0x262a	; 0x262a <GLCD_VidDrawPWM>

			flag = 4;
    3512:	84 e0       	ldi	r24, 0x04	; 4
    3514:	80 93 89 03 	sts	0x0389, r24
    3518:	02 cf       	rjmp	.-508    	; 0x331e <main+0x416>

0000351a <Vid_Drawer>:
	}
	return 0;
}

void Vid_Drawer(void)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
	if(flag == 0)
    3522:	80 91 89 03 	lds	r24, 0x0389
    3526:	88 23       	and	r24, r24
    3528:	09 f5       	brne	.+66     	; 0x356c <Vid_Drawer+0x52>
	{
		T1 = TIMER1_u16_READ_COUNT() + (count*65536);                      //Store Counts For The Raising Edge
    352a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <TIMER1_u16_READ_COUNT>
    352e:	9c 01       	movw	r18, r24
    3530:	40 e0       	ldi	r20, 0x00	; 0
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	80 91 88 03 	lds	r24, 0x0388
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a0 e0       	ldi	r26, 0x00	; 0
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	dc 01       	movw	r26, r24
    3542:	99 27       	eor	r25, r25
    3544:	88 27       	eor	r24, r24
    3546:	82 0f       	add	r24, r18
    3548:	93 1f       	adc	r25, r19
    354a:	a4 1f       	adc	r26, r20
    354c:	b5 1f       	adc	r27, r21
    354e:	80 93 a2 03 	sts	0x03A2, r24
    3552:	90 93 a3 03 	sts	0x03A3, r25
    3556:	a0 93 a4 03 	sts	0x03A4, r26
    355a:	b0 93 a5 03 	sts	0x03A5, r27
		TIMER1_VidICUEnable(TIMER1_ICU_FALLING_EDGE);   //Wait For Falling Edge
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TIMER1_VidICUEnable>
		flag = 1;
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	80 93 89 03 	sts	0x0389, r24
    356a:	46 c0       	rjmp	.+140    	; 0x35f8 <Vid_Drawer+0xde>
	}
	else if(flag == 1)
    356c:	80 91 89 03 	lds	r24, 0x0389
    3570:	81 30       	cpi	r24, 0x01	; 1
    3572:	09 f5       	brne	.+66     	; 0x35b6 <Vid_Drawer+0x9c>
	{
		T2 = TIMER1_u16_READ_COUNT() + (count*65536);                      //Store Counts For The Falling Edge
    3574:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <TIMER1_u16_READ_COUNT>
    3578:	9c 01       	movw	r18, r24
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	80 91 88 03 	lds	r24, 0x0388
    3582:	88 2f       	mov	r24, r24
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	a0 e0       	ldi	r26, 0x00	; 0
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	dc 01       	movw	r26, r24
    358c:	99 27       	eor	r25, r25
    358e:	88 27       	eor	r24, r24
    3590:	82 0f       	add	r24, r18
    3592:	93 1f       	adc	r25, r19
    3594:	a4 1f       	adc	r26, r20
    3596:	b5 1f       	adc	r27, r21
    3598:	80 93 9a 03 	sts	0x039A, r24
    359c:	90 93 9b 03 	sts	0x039B, r25
    35a0:	a0 93 9c 03 	sts	0x039C, r26
    35a4:	b0 93 9d 03 	sts	0x039D, r27
		TIMER1_VidICUEnable(TIMER1_ICU_RAISING_EDGE);   //Wait For Raising Edge
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <TIMER1_VidICUEnable>
		flag = 2;
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	80 93 89 03 	sts	0x0389, r24
    35b4:	21 c0       	rjmp	.+66     	; 0x35f8 <Vid_Drawer+0xde>
	}
	else if(flag == 2)
    35b6:	80 91 89 03 	lds	r24, 0x0389
    35ba:	82 30       	cpi	r24, 0x02	; 2
    35bc:	e9 f4       	brne	.+58     	; 0x35f8 <Vid_Drawer+0xde>
	{
		T3 = TIMER1_u16_READ_COUNT() + (count*65536);   //Store Counts For The Raising Edge
    35be:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <TIMER1_u16_READ_COUNT>
    35c2:	9c 01       	movw	r18, r24
    35c4:	40 e0       	ldi	r20, 0x00	; 0
    35c6:	50 e0       	ldi	r21, 0x00	; 0
    35c8:	80 91 88 03 	lds	r24, 0x0388
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	a0 e0       	ldi	r26, 0x00	; 0
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	dc 01       	movw	r26, r24
    35d6:	99 27       	eor	r25, r25
    35d8:	88 27       	eor	r24, r24
    35da:	82 0f       	add	r24, r18
    35dc:	93 1f       	adc	r25, r19
    35de:	a4 1f       	adc	r26, r20
    35e0:	b5 1f       	adc	r27, r21
    35e2:	80 93 9e 03 	sts	0x039E, r24
    35e6:	90 93 9f 03 	sts	0x039F, r25
    35ea:	a0 93 a0 03 	sts	0x03A0, r26
    35ee:	b0 93 a1 03 	sts	0x03A1, r27
		flag = 3;
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	80 93 89 03 	sts	0x0389, r24
	}

}
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <Vid_TIMER1_COUNT>:

void Vid_TIMER1_COUNT(void)
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
	count++;   //Increment Counter When OverFlow Occurs
    3606:	80 91 88 03 	lds	r24, 0x0388
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	80 93 88 03 	sts	0x0388, r24
}
    3610:	cf 91       	pop	r28
    3612:	df 91       	pop	r29
    3614:	08 95       	ret

00003616 <__divmodhi4>:
    3616:	97 fb       	bst	r25, 7
    3618:	09 2e       	mov	r0, r25
    361a:	07 26       	eor	r0, r23
    361c:	0a d0       	rcall	.+20     	; 0x3632 <__divmodhi4_neg1>
    361e:	77 fd       	sbrc	r23, 7
    3620:	04 d0       	rcall	.+8      	; 0x362a <__divmodhi4_neg2>
    3622:	2e d0       	rcall	.+92     	; 0x3680 <__udivmodhi4>
    3624:	06 d0       	rcall	.+12     	; 0x3632 <__divmodhi4_neg1>
    3626:	00 20       	and	r0, r0
    3628:	1a f4       	brpl	.+6      	; 0x3630 <__divmodhi4_exit>

0000362a <__divmodhi4_neg2>:
    362a:	70 95       	com	r23
    362c:	61 95       	neg	r22
    362e:	7f 4f       	sbci	r23, 0xFF	; 255

00003630 <__divmodhi4_exit>:
    3630:	08 95       	ret

00003632 <__divmodhi4_neg1>:
    3632:	f6 f7       	brtc	.-4      	; 0x3630 <__divmodhi4_exit>
    3634:	90 95       	com	r25
    3636:	81 95       	neg	r24
    3638:	9f 4f       	sbci	r25, 0xFF	; 255
    363a:	08 95       	ret

0000363c <__udivmodsi4>:
    363c:	a1 e2       	ldi	r26, 0x21	; 33
    363e:	1a 2e       	mov	r1, r26
    3640:	aa 1b       	sub	r26, r26
    3642:	bb 1b       	sub	r27, r27
    3644:	fd 01       	movw	r30, r26
    3646:	0d c0       	rjmp	.+26     	; 0x3662 <__udivmodsi4_ep>

00003648 <__udivmodsi4_loop>:
    3648:	aa 1f       	adc	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	ee 1f       	adc	r30, r30
    364e:	ff 1f       	adc	r31, r31
    3650:	a2 17       	cp	r26, r18
    3652:	b3 07       	cpc	r27, r19
    3654:	e4 07       	cpc	r30, r20
    3656:	f5 07       	cpc	r31, r21
    3658:	20 f0       	brcs	.+8      	; 0x3662 <__udivmodsi4_ep>
    365a:	a2 1b       	sub	r26, r18
    365c:	b3 0b       	sbc	r27, r19
    365e:	e4 0b       	sbc	r30, r20
    3660:	f5 0b       	sbc	r31, r21

00003662 <__udivmodsi4_ep>:
    3662:	66 1f       	adc	r22, r22
    3664:	77 1f       	adc	r23, r23
    3666:	88 1f       	adc	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	1a 94       	dec	r1
    366c:	69 f7       	brne	.-38     	; 0x3648 <__udivmodsi4_loop>
    366e:	60 95       	com	r22
    3670:	70 95       	com	r23
    3672:	80 95       	com	r24
    3674:	90 95       	com	r25
    3676:	9b 01       	movw	r18, r22
    3678:	ac 01       	movw	r20, r24
    367a:	bd 01       	movw	r22, r26
    367c:	cf 01       	movw	r24, r30
    367e:	08 95       	ret

00003680 <__udivmodhi4>:
    3680:	aa 1b       	sub	r26, r26
    3682:	bb 1b       	sub	r27, r27
    3684:	51 e1       	ldi	r21, 0x11	; 17
    3686:	07 c0       	rjmp	.+14     	; 0x3696 <__udivmodhi4_ep>

00003688 <__udivmodhi4_loop>:
    3688:	aa 1f       	adc	r26, r26
    368a:	bb 1f       	adc	r27, r27
    368c:	a6 17       	cp	r26, r22
    368e:	b7 07       	cpc	r27, r23
    3690:	10 f0       	brcs	.+4      	; 0x3696 <__udivmodhi4_ep>
    3692:	a6 1b       	sub	r26, r22
    3694:	b7 0b       	sbc	r27, r23

00003696 <__udivmodhi4_ep>:
    3696:	88 1f       	adc	r24, r24
    3698:	99 1f       	adc	r25, r25
    369a:	5a 95       	dec	r21
    369c:	a9 f7       	brne	.-22     	; 0x3688 <__udivmodhi4_loop>
    369e:	80 95       	com	r24
    36a0:	90 95       	com	r25
    36a2:	bc 01       	movw	r22, r24
    36a4:	cd 01       	movw	r24, r26
    36a6:	08 95       	ret

000036a8 <__prologue_saves__>:
    36a8:	2f 92       	push	r2
    36aa:	3f 92       	push	r3
    36ac:	4f 92       	push	r4
    36ae:	5f 92       	push	r5
    36b0:	6f 92       	push	r6
    36b2:	7f 92       	push	r7
    36b4:	8f 92       	push	r8
    36b6:	9f 92       	push	r9
    36b8:	af 92       	push	r10
    36ba:	bf 92       	push	r11
    36bc:	cf 92       	push	r12
    36be:	df 92       	push	r13
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	ca 1b       	sub	r28, r26
    36d2:	db 0b       	sbc	r29, r27
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	09 94       	ijmp

000036e0 <__epilogue_restores__>:
    36e0:	2a 88       	ldd	r2, Y+18	; 0x12
    36e2:	39 88       	ldd	r3, Y+17	; 0x11
    36e4:	48 88       	ldd	r4, Y+16	; 0x10
    36e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    36e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    36ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    36f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36f2:	b9 84       	ldd	r11, Y+9	; 0x09
    36f4:	c8 84       	ldd	r12, Y+8	; 0x08
    36f6:	df 80       	ldd	r13, Y+7	; 0x07
    36f8:	ee 80       	ldd	r14, Y+6	; 0x06
    36fa:	fd 80       	ldd	r15, Y+5	; 0x05
    36fc:	0c 81       	ldd	r16, Y+4	; 0x04
    36fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3700:	aa 81       	ldd	r26, Y+2	; 0x02
    3702:	b9 81       	ldd	r27, Y+1	; 0x01
    3704:	ce 0f       	add	r28, r30
    3706:	d1 1d       	adc	r29, r1
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	ed 01       	movw	r28, r26
    3714:	08 95       	ret

00003716 <round>:
    3716:	50 d0       	rcall	.+160    	; 0x37b8 <__fp_splitA>
    3718:	e0 f0       	brcs	.+56     	; 0x3752 <round+0x3c>
    371a:	9e 37       	cpi	r25, 0x7E	; 126
    371c:	d8 f0       	brcs	.+54     	; 0x3754 <round+0x3e>
    371e:	96 39       	cpi	r25, 0x96	; 150
    3720:	b8 f4       	brcc	.+46     	; 0x3750 <round+0x3a>
    3722:	9e 38       	cpi	r25, 0x8E	; 142
    3724:	48 f4       	brcc	.+18     	; 0x3738 <round+0x22>
    3726:	67 2f       	mov	r22, r23
    3728:	78 2f       	mov	r23, r24
    372a:	88 27       	eor	r24, r24
    372c:	98 5f       	subi	r25, 0xF8	; 248
    372e:	f9 cf       	rjmp	.-14     	; 0x3722 <round+0xc>
    3730:	86 95       	lsr	r24
    3732:	77 95       	ror	r23
    3734:	67 95       	ror	r22
    3736:	93 95       	inc	r25
    3738:	95 39       	cpi	r25, 0x95	; 149
    373a:	d0 f3       	brcs	.-12     	; 0x3730 <round+0x1a>
    373c:	b6 2f       	mov	r27, r22
    373e:	b1 70       	andi	r27, 0x01	; 1
    3740:	6b 0f       	add	r22, r27
    3742:	71 1d       	adc	r23, r1
    3744:	81 1d       	adc	r24, r1
    3746:	20 f4       	brcc	.+8      	; 0x3750 <round+0x3a>
    3748:	87 95       	ror	r24
    374a:	77 95       	ror	r23
    374c:	67 95       	ror	r22
    374e:	93 95       	inc	r25
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <__fp_mintl>
    3752:	1c c0       	rjmp	.+56     	; 0x378c <__fp_mpack>
    3754:	4c c0       	rjmp	.+152    	; 0x37ee <__fp_szero>

00003756 <__fp_mintl>:
    3756:	88 23       	and	r24, r24
    3758:	71 f4       	brne	.+28     	; 0x3776 <__fp_mintl+0x20>
    375a:	77 23       	and	r23, r23
    375c:	21 f0       	breq	.+8      	; 0x3766 <__fp_mintl+0x10>
    375e:	98 50       	subi	r25, 0x08	; 8
    3760:	87 2b       	or	r24, r23
    3762:	76 2f       	mov	r23, r22
    3764:	07 c0       	rjmp	.+14     	; 0x3774 <__fp_mintl+0x1e>
    3766:	66 23       	and	r22, r22
    3768:	11 f4       	brne	.+4      	; 0x376e <__fp_mintl+0x18>
    376a:	99 27       	eor	r25, r25
    376c:	0d c0       	rjmp	.+26     	; 0x3788 <__fp_mintl+0x32>
    376e:	90 51       	subi	r25, 0x10	; 16
    3770:	86 2b       	or	r24, r22
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	2a f0       	brmi	.+10     	; 0x3782 <__fp_mintl+0x2c>
    3778:	9a 95       	dec	r25
    377a:	66 0f       	add	r22, r22
    377c:	77 1f       	adc	r23, r23
    377e:	88 1f       	adc	r24, r24
    3780:	da f7       	brpl	.-10     	; 0x3778 <__fp_mintl+0x22>
    3782:	88 0f       	add	r24, r24
    3784:	96 95       	lsr	r25
    3786:	87 95       	ror	r24
    3788:	97 f9       	bld	r25, 7
    378a:	08 95       	ret

0000378c <__fp_mpack>:
    378c:	9f 3f       	cpi	r25, 0xFF	; 255
    378e:	31 f0       	breq	.+12     	; 0x379c <__fp_mpack_finite+0xc>

00003790 <__fp_mpack_finite>:
    3790:	91 50       	subi	r25, 0x01	; 1
    3792:	20 f4       	brcc	.+8      	; 0x379c <__fp_mpack_finite+0xc>
    3794:	87 95       	ror	r24
    3796:	77 95       	ror	r23
    3798:	67 95       	ror	r22
    379a:	b7 95       	ror	r27
    379c:	88 0f       	add	r24, r24
    379e:	91 1d       	adc	r25, r1
    37a0:	96 95       	lsr	r25
    37a2:	87 95       	ror	r24
    37a4:	97 f9       	bld	r25, 7
    37a6:	08 95       	ret

000037a8 <__fp_split3>:
    37a8:	57 fd       	sbrc	r21, 7
    37aa:	90 58       	subi	r25, 0x80	; 128
    37ac:	44 0f       	add	r20, r20
    37ae:	55 1f       	adc	r21, r21
    37b0:	59 f0       	breq	.+22     	; 0x37c8 <__fp_splitA+0x10>
    37b2:	5f 3f       	cpi	r21, 0xFF	; 255
    37b4:	71 f0       	breq	.+28     	; 0x37d2 <__fp_splitA+0x1a>
    37b6:	47 95       	ror	r20

000037b8 <__fp_splitA>:
    37b8:	88 0f       	add	r24, r24
    37ba:	97 fb       	bst	r25, 7
    37bc:	99 1f       	adc	r25, r25
    37be:	61 f0       	breq	.+24     	; 0x37d8 <__fp_splitA+0x20>
    37c0:	9f 3f       	cpi	r25, 0xFF	; 255
    37c2:	79 f0       	breq	.+30     	; 0x37e2 <__fp_splitA+0x2a>
    37c4:	87 95       	ror	r24
    37c6:	08 95       	ret
    37c8:	12 16       	cp	r1, r18
    37ca:	13 06       	cpc	r1, r19
    37cc:	14 06       	cpc	r1, r20
    37ce:	55 1f       	adc	r21, r21
    37d0:	f2 cf       	rjmp	.-28     	; 0x37b6 <__fp_split3+0xe>
    37d2:	46 95       	lsr	r20
    37d4:	f1 df       	rcall	.-30     	; 0x37b8 <__fp_splitA>
    37d6:	08 c0       	rjmp	.+16     	; 0x37e8 <__fp_splitA+0x30>
    37d8:	16 16       	cp	r1, r22
    37da:	17 06       	cpc	r1, r23
    37dc:	18 06       	cpc	r1, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	f1 cf       	rjmp	.-30     	; 0x37c4 <__fp_splitA+0xc>
    37e2:	86 95       	lsr	r24
    37e4:	71 05       	cpc	r23, r1
    37e6:	61 05       	cpc	r22, r1
    37e8:	08 94       	sec
    37ea:	08 95       	ret

000037ec <__fp_zero>:
    37ec:	e8 94       	clt

000037ee <__fp_szero>:
    37ee:	bb 27       	eor	r27, r27
    37f0:	66 27       	eor	r22, r22
    37f2:	77 27       	eor	r23, r23
    37f4:	cb 01       	movw	r24, r22
    37f6:	97 f9       	bld	r25, 7
    37f8:	08 95       	ret

000037fa <_exit>:
    37fa:	f8 94       	cli

000037fc <__stop_program>:
    37fc:	ff cf       	rjmp	.-2      	; 0x37fc <__stop_program>
